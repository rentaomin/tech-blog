"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[5628],{303:(a,s,e)=>{e.r(s),e.d(s,{comp:()=>i,data:()=>r});var n=e(641);const l=[(0,n.Fv)('<h1 id="kafka集群生产性能调优业务场景" tabindex="-1"><a class="header-anchor" href="#kafka集群生产性能调优业务场景"><span>kafka集群生产性能调优业务场景</span></a></h1><p>Kafka 集群的生产性能调优可以通过多种途径实现，包括硬件配置优化、Kafka 配置参数调优、客户端配置优化、操作 系统和网络配置优化等。以下是详细的调优途径和适用场景：</p><h3 id="_1-硬件配置优化" tabindex="-1"><a class="header-anchor" href="#_1-硬件配置优化"><span>1. 硬件配置优化</span></a></h3><h4 id="_1-1-磁盘" tabindex="-1"><a class="header-anchor" href="#_1-1-磁盘"><span>1.1 磁盘</span></a></h4><ul><li><strong>SSD</strong>：使用 SSD 而不是 HDD 来提高磁盘 I/O 性能，因为 SSD 的顺序写入和随机写入性能都显著优于 HDD。</li><li><strong>磁盘分区</strong>：确保 Kafka 日志目录位于单独的磁盘分区上，以避免与其他应用程序的 I/O 竞争。</li></ul><h4 id="_1-2-内存" tabindex="-1"><a class="header-anchor" href="#_1-2-内存"><span>1.2 内存</span></a></h4><ul><li><strong>增加内存</strong>：Kafka 的性能受内存大小影响较大，增加内存可以提高页缓存的命中率，减少磁盘 I/O 操作。</li><li><strong>堆外内存</strong>：使用堆外内存（off-heap memory）来缓存消息，减少 GC 对性能的影响。</li></ul><h4 id="_1-3-cpu" tabindex="-1"><a class="header-anchor" href="#_1-3-cpu"><span>1.3 CPU</span></a></h4><ul><li><strong>多核 CPU</strong>：使用多核 CPU，以便更好地处理并发请求和后台任务（如日志压缩和复制）。</li></ul><h3 id="_2-kafka-配置参数调优" tabindex="-1"><a class="header-anchor" href="#_2-kafka-配置参数调优"><span>2. Kafka 配置参数调优</span></a></h3><h4 id="_2-1-日志配置" tabindex="-1"><a class="header-anchor" href="#_2-1-日志配置"><span>2.1 日志配置</span></a></h4><ul><li><strong>log.segment.bytes</strong>：调整单个日志分段的大小，较大的日志分段可以减少分段数量，但会增加磁盘空间的使用。</li><li><strong>log.retention.bytes 和 log.retention.hours</strong>：根据业务需求设置日志保留策略，既保证数据保留时间，又不 浪费磁盘空间。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">log.segment.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1073741824    # 1GB</span></span>\n<span class="line"><span class="token key attr-name">log.retention.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">10737418240 # 10GB</span></span>\n<span class="line"><span class="token key attr-name">log.retention.hours</span><span class="token punctuation">=</span><span class="token value attr-value">168         # 7天</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-生产者配置" tabindex="-1"><a class="header-anchor" href="#_2-2-生产者配置"><span>2.2 生产者配置</span></a></h4><ul><li><strong>batch.size</strong>：设置生产者批量发送的消息大小。较大的批量可以提高吞吐量，但可能增加延迟。</li><li><strong>linger.ms</strong>：设置生产者在发送批量消息前的等待时间，以聚合更多消息。</li><li><strong>compression.type</strong>：启用消息压缩（如 gzip、snappy）以减少网络带宽和磁盘空间的使用。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">batch.size</span><span class="token punctuation">=</span><span class="token value attr-value">65536       # 64KB</span></span>\n<span class="line"><span class="token key attr-name">linger.ms</span><span class="token punctuation">=</span><span class="token value attr-value">5            # 5毫秒</span></span>\n<span class="line"><span class="token key attr-name">compression.type</span><span class="token punctuation">=</span><span class="token value attr-value">snappy</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-复制和分区配置" tabindex="-1"><a class="header-anchor" href="#_2-3-复制和分区配置"><span>2.3 复制和分区配置</span></a></h4><ul><li><strong>num.replica.fetchers</strong>：增加副本提取线程的数量，以提高副本同步性能。</li><li><strong>replica.fetch.max.bytes</strong>：增加单次副本提取的最大数据量。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">num.replica.fetchers</span><span class="token punctuation">=</span><span class="token value attr-value">4</span></span>\n<span class="line"><span class="token key attr-name">replica.fetch.max.bytes</span><span class="token punctuation">=</span><span class="token value attr-value">1048576 # 1MB</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-客户端配置优化" tabindex="-1"><a class="header-anchor" href="#_3-客户端配置优化"><span>3. 客户端配置优化</span></a></h3><h4 id="_3-1-生产者配置" tabindex="-1"><a class="header-anchor" href="#_3-1-生产者配置"><span>3.1 生产者配置</span></a></h4><ul><li><strong>acks</strong>：设置 <code>acks=1</code> 或 <code>acks=all</code> 来平衡可靠性和性能。<code>acks=1</code> 只等待 Leader 确认，性能较高； <code>acks=all</code> 等待所有 ISR 副本确认，可靠性较高。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">acks</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>retries</strong>：增加重试次数，以应对临时故障。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">retries</span><span class="token punctuation">=</span><span class="token value attr-value">5</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>buffer.memory</strong>：增加生产者缓冲区大小，以提高批量发送的效率。</li></ul><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">buffer.memory</span><span class="token punctuation">=</span><span class="token value attr-value">33554432 # 32MB</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-操作系统和网络配置优化" tabindex="-1"><a class="header-anchor" href="#_4-操作系统和网络配置优化"><span>4. 操作系统和网络配置优化</span></a></h3><h4 id="_4-1-操作系统配置" tabindex="-1"><a class="header-anchor" href="#_4-1-操作系统配置"><span>4.1 操作系统配置</span></a></h4><ul><li><strong>文件描述符</strong>：增加文件描述符的限制，以支持更多的并发连接。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token number">100000</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>页面缓存</strong>：优化页面缓存设置，以提高磁盘 I/O 性能。</li></ul><h4 id="_4-2-网络配置" tabindex="-1"><a class="header-anchor" href="#_4-2-网络配置"><span>4.2 网络配置</span></a></h4><ul><li><strong>TCP 设置</strong>：优化 TCP 缓冲区大小和连接设置。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.rmem_max</span><span class="token operator">=</span><span class="token number">16777216</span></span>\n<span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.wmem_max</span><span class="token operator">=</span><span class="token number">16777216</span></span>\n<span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_rmem</span><span class="token operator">=</span><span class="token string">&#39;4096 87380 16777216&#39;</span></span>\n<span class="line"><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_wmem</span><span class="token operator">=</span><span class="token string">&#39;4096 65536 16777216&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>网络带宽</strong>：确保网络带宽足够，避免网络瓶颈。</li></ul><h3 id="_5-场景适用示例" tabindex="-1"><a class="header-anchor" href="#_5-场景适用示例"><span>5. 场景适用示例</span></a></h3><h4 id="场景-1-高吞吐量生产" tabindex="-1"><a class="header-anchor" href="#场景-1-高吞吐量生产"><span>场景 1：高吞吐量生产</span></a></h4><p>在高吞吐量生产场景下，以下配置可以提高 Kafka 的生产性能：</p><ul><li><strong>硬件</strong>：使用 SSD，增加内存和 CPU 核心数。</li><li><strong>Kafka 配置</strong>：增大 <code>batch.size</code> 和 <code>linger.ms</code>，启用消息压缩。</li><li><strong>客户端配置</strong>：设置 <code>acks=1</code>，增加 <code>buffer.memory</code> 和 <code>retries</code>。</li></ul><h4 id="场景-2-高可靠性生产" tabindex="-1"><a class="header-anchor" href="#场景-2-高可靠性生产"><span>场景 2：高可靠性生产</span></a></h4><p>在需要高可靠性的场景下，以下配置可以提高 Kafka 的数据可靠性：</p><ul><li><strong>Kafka 配置</strong>：设置 <code>num.replica.fetchers</code> 和 <code>replica.fetch.max.bytes</code> 以提高副本同步性能。</li><li><strong>客户端配置</strong>：设置 <code>acks=all</code>，确保所有 ISR 副本确认后再返回成功。</li></ul><h4 id="场景-3-混合负载" tabindex="-1"><a class="header-anchor" href="#场景-3-混合负载"><span>场景 3：混合负载</span></a></h4><p>在混合负载场景下，需要在性能和可靠性之间进行权衡：</p><ul><li><strong>硬件</strong>：合理配置 SSD、内存和 CPU。</li><li><strong>Kafka 配置</strong>：根据业务需求调整 <code>log.segment.bytes</code> 和 <code>log.retention.bytes</code>。</li><li><strong>客户端配置</strong>：选择合适的 <code>acks</code> 和重试配置，以平衡性能和可靠性。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Kafka 集群生产性能调优需要综合考虑硬件配置、Kafka 配置参数、客户端配置、操作系统和网络配置等多个方面。根据具 体的业务场景，可以通过以下途径进行调优：</p><ul><li><strong>硬件配置</strong>：使用高性能硬件，提高内存和 CPU 配置。</li><li><strong>Kafka 配置</strong>：优化日志配置、生产者配置、复制和分区配置。</li><li><strong>客户端配置</strong>：调整生产者的批量发送、压缩、确认机制等参数。</li><li><strong>操作系统和网络配置</strong>：优化文件描述符、页面缓存和网络设置。</li></ul><p>通过综合应用这些调优策略，可以显著提高 Kafka 集群的生产性能，满足高吞吐量、高可靠性等不同业务需求。</p>',50)],t={},i=(0,e(6262).A)(t,[["render",function(a,s){return(0,n.uX)(),(0,n.CE)("div",null,l)}]]),r=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E7%94%9F%E4%BA%A7%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF.html","title":"kafka集群生产性能调优业务场景","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. 硬件配置优化","slug":"_1-硬件配置优化","link":"#_1-硬件配置优化","children":[]},{"level":3,"title":"2. Kafka 配置参数调优","slug":"_2-kafka-配置参数调优","link":"#_2-kafka-配置参数调优","children":[]},{"level":3,"title":"3. 客户端配置优化","slug":"_3-客户端配置优化","link":"#_3-客户端配置优化","children":[]},{"level":3,"title":"4. 操作系统和网络配置优化","slug":"_4-操作系统和网络配置优化","link":"#_4-操作系统和网络配置优化","children":[]},{"level":3,"title":"5. 场景适用示例","slug":"_5-场景适用示例","link":"#_5-场景适用示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720532327000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群生产性能调优业务场景.md"}')}}]);