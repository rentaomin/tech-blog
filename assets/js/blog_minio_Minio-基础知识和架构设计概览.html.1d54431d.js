"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[6647],{8291:(a,s,n)=>{n.r(s),n.d(s,{comp:()=>r,data:()=>t});var e=n(641);const i=[(0,e.Fv)('<h1 id="minio-基础知识和架构设计概览" tabindex="-1"><a class="header-anchor" href="#minio-基础知识和架构设计概览"><span>Minio 基础知识和架构设计概览</span></a></h1><p>为了有效掌握 MinIO 及其架构设计，架构师需要深入理解以下基本概念和架构设计要点：</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h3><h4 id="_1-对象存储" tabindex="-1"><a class="header-anchor" href="#_1-对象存储"><span>1. 对象存储</span></a></h4><ul><li><strong>对象存储模型</strong>：对象存储是一种数据存储架构，数据被存储为对象，而不是传统的块存储或文件 存储。每个对象包含数据、元数据和唯一标识符。对象存储适用于大规模、非结构化数据存储，如媒体文 件、备份和日志文件。</li></ul><h4 id="_2-bucket" tabindex="-1"><a class="header-anchor" href="#_2-bucket"><span>2. Bucket</span></a></h4><ul><li><strong>Bucket</strong>：类似于文件系统中的目录，用于存储对象。每个 Bucket 具有全局唯一的名称，可以包含多个对象。</li></ul><h4 id="_3-对象" tabindex="-1"><a class="header-anchor" href="#_3-对象"><span>3. 对象</span></a></h4><ul><li><strong>对象</strong>：存储在 Bucket 中的数据单元，每个对象由唯一的键标识。对象包含实际数据和元数据（如创建时间、 文件类型）。</li></ul><h4 id="_4-minio-服务" tabindex="-1"><a class="header-anchor" href="#_4-minio-服务"><span>4. MinIO 服务</span></a></h4><ul><li><strong>MinIO 服务</strong>：MinIO 是一个高性能的分布式对象存储系统，支持 S3 兼容 API，便于集成和使用。</li></ul><h3 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h3><h4 id="_1-单机模式" tabindex="-1"><a class="header-anchor" href="#_1-单机模式"><span>1. 单机模式</span></a></h4><p>单机模式适用于开发和测试环境。MinIO 可以在单个节点上运行，提供基本的对象存储服务。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">minio server /data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><strong>优势</strong>：部署简单，适合小规模测试。</li><li><strong>劣势</strong>：没有高可用性和容错能力，单点故障会导致数据不可用。</li></ul><h4 id="_2-分布式模式" tabindex="-1"><a class="header-anchor" href="#_2-分布式模式"><span>2. 分布式模式</span></a></h4><p>分布式模式适用于生产环境，通过多个节点提供高可用性和扩展性。至少需要 4 个节点来实现分布式部署。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">minio server http://node1/data http://node2/data http://node3/data http://node4/data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="_2-1-分布式架构" tabindex="-1"><a class="header-anchor" href="#_2-1-分布式架构"><span>2.1 分布式架构</span></a></h5><ul><li><strong>节点</strong>：每个 MinIO 节点运行一个 MinIO 服务器实例，负责存储和管理部分数据。</li><li><strong>分片和冗余</strong>：使用 erasure coding 技术将数据分片和冗余存储在多个节点上，以确保数据的高可用性和容错能力。</li><li><strong>高可用性</strong>：通过分布式架构实现高可用性，即使部分节点故障，系统仍能继续提供服务。</li></ul><h5 id="_2-2-元数据管理" tabindex="-1"><a class="header-anchor" href="#_2-2-元数据管理"><span>2.2 元数据管理</span></a></h5><ul><li><strong>分布式锁</strong>：MinIO 使用分布式锁来管理并发访问，确保数据的一致性和完整性。</li><li><strong>对象版本控制</strong>：MinIO 支持对象版本控制，允许在对象被覆盖或删除时保留其历史版本。</li></ul><h3 id="关键技术和机制" tabindex="-1"><a class="header-anchor" href="#关键技术和机制"><span>关键技术和机制</span></a></h3><h4 id="_1-erasure-coding" tabindex="-1"><a class="header-anchor" href="#_1-erasure-coding"><span>1. Erasure Coding</span></a></h4><ul><li><strong>Erasure Coding</strong>：一种数据保护技术，将数据分成多个片段并添加冗余信息。即使部分片段丢失，仍能通过冗余信息 恢复数据。</li></ul><h4 id="_2-高性能" tabindex="-1"><a class="header-anchor" href="#_2-高性能"><span>2. 高性能</span></a></h4><ul><li><strong>Golang</strong>：MinIO 使用 Go 语言编写，具备高并发处理能力和高性能网络 I/O。</li><li><strong>高效 I/O</strong>：通过优化磁盘和网络 I/O，提高数据读写性能。</li></ul><h4 id="_3-s3-兼容性" tabindex="-1"><a class="header-anchor" href="#_3-s3-兼容性"><span>3. S3 兼容性</span></a></h4><ul><li><strong>S3 API</strong>：MinIO 完全兼容 AWS S3 API，便于与使用 S3 的现有应用程序集成。</li><li><strong>S3 工具支持</strong>：支持 AWS CLI、s3cmd、Boto3 等 S3 客户端工具。</li></ul><h3 id="安全性和访问控制" tabindex="-1"><a class="header-anchor" href="#安全性和访问控制"><span>安全性和访问控制</span></a></h3><h4 id="_1-访问控制" tabindex="-1"><a class="header-anchor" href="#_1-访问控制"><span>1. 访问控制</span></a></h4><ul><li><strong>访问密钥</strong>：使用访问密钥和密钥进行身份验证。</li><li><strong>Bucket 策略</strong>：通过 Bucket 策略控制用户对 Bucket 及其内容的访问权限。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mc</span> admin user <span class="token function">add</span> myminio myuser mypassword</span>\n<span class="line"><span class="token function">mc</span> admin policy <span class="token builtin class-name">set</span> myminio readwrite <span class="token assign-left variable">user</span><span class="token operator">=</span>myuser</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数据加密" tabindex="-1"><a class="header-anchor" href="#_2-数据加密"><span>2. 数据加密</span></a></h4><ul><li><strong>静态数据加密</strong>：在磁盘上加密存储的数据。</li><li><strong>传输数据加密</strong>：使用 HTTPS 协议加密传输数据。</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">minio server --certs-dir /path/to/certs /data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="集群管理和运维" tabindex="-1"><a class="header-anchor" href="#集群管理和运维"><span>集群管理和运维</span></a></h3><h4 id="_1-监控和日志" tabindex="-1"><a class="header-anchor" href="#_1-监控和日志"><span>1. 监控和日志</span></a></h4><ul><li><strong>Prometheus 和 Grafana</strong>：通过 Prometheus 和 Grafana 监控 MinIO 的性能和健康状态。</li><li><strong>访问日志</strong>：记录所有的访问请求，用于审计和故障排查。</li></ul><h4 id="_2-数据迁移和备份" tabindex="-1"><a class="header-anchor" href="#_2-数据迁移和备份"><span>2. 数据迁移和备份</span></a></h4><ul><li><strong>数据备份</strong>：定期备份 MinIO 中的数据，确保数据安全。</li><li><strong>数据迁移</strong>：在需要时将数据迁移到新的存储节点或集群。</li></ul><h4 id="_3-高可用性和容灾" tabindex="-1"><a class="header-anchor" href="#_3-高可用性和容灾"><span>3. 高可用性和容灾</span></a></h4><ul><li><strong>跨数据中心复制</strong>：将数据复制到远程数据中心，实现异地灾备。</li><li><strong>自动恢复</strong>：在节点故障时，自动重建丢失的数据分片，确保数据完整性和可用性。</li></ul><h3 id="实践示例" tabindex="-1"><a class="header-anchor" href="#实践示例"><span>实践示例</span></a></h3><h4 id="部署-minio-分布式模式" tabindex="-1"><a class="header-anchor" href="#部署-minio-分布式模式"><span>部署 MinIO 分布式模式</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">minio server http://node1/data http://node2/data http://node3/data http://node4/data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="设置用户和权限" tabindex="-1"><a class="header-anchor" href="#设置用户和权限"><span>设置用户和权限</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mc</span> admin user <span class="token function">add</span> myminio myuser mypassword</span>\n<span class="line"><span class="token function">mc</span> admin policy <span class="token builtin class-name">set</span> myminio readwrite <span class="token assign-left variable">user</span><span class="token operator">=</span>myuser</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启用-https-加密" tabindex="-1"><a class="header-anchor" href="#启用-https-加密"><span>启用 HTTPS 加密</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">minio server --certs-dir /path/to/certs /data</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>作为架构师，掌握 MinIO 的基本概念和架构设计，包括对象存储模型、分布式架构、erasure coding 技术、S3 兼容性、 安全性和访问控制、高性能设计、监控和日志、数据迁移和备份以及高可用性和容灾策略，有助于在各种业务场景下设计和 管理 MinIO 集群，确保系统的高效运行和数据安全。</p>',53)],l={},r=(0,n(6262).A)(l,[["render",function(a,s){return(0,e.uX)(),(0,e.CE)("div",null,i)}]]),t=JSON.parse('{"path":"/blog/minio/Minio-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%92%8C%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%A7%88.html","title":"Minio 基础知识和架构设计概览","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":3,"title":"架构设计","slug":"架构设计","link":"#架构设计","children":[]},{"level":3,"title":"关键技术和机制","slug":"关键技术和机制","link":"#关键技术和机制","children":[]},{"level":3,"title":"安全性和访问控制","slug":"安全性和访问控制","link":"#安全性和访问控制","children":[]},{"level":3,"title":"集群管理和运维","slug":"集群管理和运维","link":"#集群管理和运维","children":[]},{"level":3,"title":"实践示例","slug":"实践示例","link":"#实践示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720532327000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-基础知识和架构设计概览.md"}')}}]);