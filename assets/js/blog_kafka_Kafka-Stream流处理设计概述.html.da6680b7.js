"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[9299],{3456:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>o,data:()=>c});var t=s(641);const p=[(0,t.Fv)('<h1 id="kafka-stream-流处理设计概述" tabindex="-1"><a class="header-anchor" href="#kafka-stream-流处理设计概述"><span>Kafka Stream 流处理设计概述</span></a></h1><p>Kafka 流处理是指使用 Kafka 及其生态系统中的组件来处理实时数据流。Kafka Streams 是 Kafka 官方 提供的流处理库，它简化了构建流处理应用程序的过程，并与 Kafka 无缝集成。以下是 Kafka 流处理的设 计原理和相关概念。</p><h3 id="_1-kafka-流处理基本概念" tabindex="-1"><a class="header-anchor" href="#_1-kafka-流处理基本概念"><span>1. Kafka 流处理基本概念</span></a></h3><h4 id="_1-1-流-stream" tabindex="-1"><a class="header-anchor" href="#_1-1-流-stream"><span>1.1 流（Stream）</span></a></h4><p>流是一个不可变数据记录的无界序列。每个记录都有一个键、一个值和一个时间戳。</p><h4 id="_1-2-表-table" tabindex="-1"><a class="header-anchor" href="#_1-2-表-table"><span>1.2 表（Table）</span></a></h4><p>表表示一个可变的状态视图，它是一个键值对集合，键是唯一的。表可以从流中构建，并可以被查询和更新。</p><h4 id="_1-3-拓扑-topology" tabindex="-1"><a class="header-anchor" href="#_1-3-拓扑-topology"><span>1.3 拓扑（Topology）</span></a></h4><p>拓扑是一个数据处理的有向无环图（DAG），定义了数据如何从源节点流向终端节点。每个节点表示一个流处理步骤， 如过滤、映射、聚合等。</p><h3 id="_2-kafka-streams-设计原理" tabindex="-1"><a class="header-anchor" href="#_2-kafka-streams-设计原理"><span>2. Kafka Streams 设计原理</span></a></h3><h4 id="_2-1-无缝集成" tabindex="-1"><a class="header-anchor" href="#_2-1-无缝集成"><span>2.1 无缝集成</span></a></h4><p>Kafka Streams 是一个轻量级的 Java 库，与 Kafka 无缝集成，利用 Kafka 的高吞吐量、分布式、容错的特点进 行流处理。</p><h4 id="_2-2-分布式处理" tabindex="-1"><a class="header-anchor" href="#_2-2-分布式处理"><span>2.2 分布式处理</span></a></h4><p>Kafka Streams 自动管理分布式处理，应用程序可以在多个实例上运行，每个实例处理不同的分区。这使得流处理应用 程序可以水平扩展，处理大量数据。</p><h4 id="_2-3-状态存储" tabindex="-1"><a class="header-anchor" href="#_2-3-状态存储"><span>2.3 状态存储</span></a></h4><p>Kafka Streams 支持有状态处理，允许在处理过程中保存中间状态。状态存储可以保存在内存中或使用 RocksDB 持久化 存储。此外，Kafka Streams 可以将状态存储在 Kafka 中，实现故障恢复和再平衡。</p><h4 id="_2-4-事件时间处理" tabindex="-1"><a class="header-anchor" href="#_2-4-事件时间处理"><span>2.4 事件时间处理</span></a></h4><p>Kafka Streams 支持事件时间处理，能够按照事件发生的时间顺序处理数据，而不仅仅是数据到达的时间。这对于处理有时 间依赖的流处理任务（如窗口操作）非常重要。</p><h3 id="_3-kafka-streams-核心-api" tabindex="-1"><a class="header-anchor" href="#_3-kafka-streams-核心-api"><span>3. Kafka Streams 核心 API</span></a></h3><p>Kafka Streams 提供了高层次的 DSL（Domain-Specific Language）API 和较低层次的 Processor API。以下是一些常 用的操作：</p><h4 id="_3-1-高层次-dsl-api" tabindex="-1"><a class="header-anchor" href="#_3-1-高层次-dsl-api"><span>3.1 高层次 DSL API</span></a></h4><ul><li><strong>流转换</strong>：对流进行过滤、映射、分组等操作。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> source <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;input-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> transformed <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span></span>\n<span class="line">                                            <span class="token punctuation">.</span><span class="token function">mapValues</span><span class="token punctuation">(</span>value <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">transformed<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;output-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>聚合操作</strong>：对流进行聚合，如计数、求和等。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">KGroupedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> groupedStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">groupByKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">KTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> countTable <span class="token operator">=</span> groupedStream<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">countTable<span class="token punctuation">.</span><span class="token function">toStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;output-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>窗口操作</strong>：在时间窗口内对流进行处理。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">TimeWindows</span> timeWindows <span class="token operator">=</span> <span class="token class-name">TimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMinutes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">KTable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Windowed</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> windowedCounts <span class="token operator">=</span> groupedStream<span class="token punctuation">.</span><span class="token function">windowedBy</span><span class="token punctuation">(</span>timeWindows<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">windowedCounts<span class="token punctuation">.</span><span class="token function">toStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;output-topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-低层次-processor-api" tabindex="-1"><a class="header-anchor" href="#_3-2-低层次-processor-api"><span>3.2 低层次 Processor API</span></a></h4><p>Processor API 提供更灵活的操作，可以自定义处理逻辑。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Topology</span> topology <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Topology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">topology<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token string">&quot;Source&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;input-topic&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">.</span><span class="token function">addProcessor</span><span class="token punctuation">(</span><span class="token string">&quot;Process&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">MyProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;Source&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span><span class="token string">&quot;Sink&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;output-topic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Process&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token class-name">KafkaStreams</span> streams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaStreams</span><span class="token punctuation">(</span>topology<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">streams<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-kafka-streams-应用示例" tabindex="-1"><a class="header-anchor" href="#_4-kafka-streams-应用示例"><span>4. Kafka Streams 应用示例</span></a></h3><h4 id="示例-实时数据处理" tabindex="-1"><a class="header-anchor" href="#示例-实时数据处理"><span>示例：实时数据处理</span></a></h4><p>假设我们需要从一个 Kafka 主题中读取用户点击事件，过滤掉点击数少于 10 的事件，并将结果写入另一个主题。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_ID_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;streams-example&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_KEY_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">StreamsConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_VALUE_SERDE_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">Serdes<span class="token punctuation">.</span>String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token class-name">StreamsBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StreamsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> source <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token string">&quot;user-clicks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">KStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filtered <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">filtered<span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;filtered-clicks&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token class-name">KafkaStreams</span> streams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaStreams</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">streams<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-优势和使用场景" tabindex="-1"><a class="header-anchor" href="#_5-优势和使用场景"><span>5. 优势和使用场景</span></a></h3><h4 id="优势" tabindex="-1"><a class="header-anchor" href="#优势"><span>优势</span></a></h4><ul><li><strong>简洁的 API</strong>：高层次的 DSL API 使得流处理逻辑简单易懂。</li><li><strong>容错和恢复</strong>：利用 Kafka 的容错机制，Kafka Streams 可以实现高可用性。</li><li><strong>状态管理</strong>：支持有状态处理，并且状态可以持久化存储，支持故障恢复。</li><li><strong>事件时间处理</strong>：支持基于事件时间的处理，适用于时间敏感的流处理任务。</li></ul><h4 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h4><ul><li><strong>实时数据分析</strong>：如实时日志分析、监控报警系统。</li><li><strong>实时 ETL</strong>：将数据从一个存储系统实时传输到另一个存储系统。</li><li><strong>复杂事件处理</strong>：如实时欺诈检测、推荐系统。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Kafka 流处理通过 Kafka Streams 提供了一套强大的工具，用于构建实时数据处理应用。它与 Kafka 无缝集成，支持分布 式处理、状态管理和事件时间处理。通过高层次 DSL API 和低层次 Processor API，开发者可以灵活地构建复杂的流处理逻 辑，满足各种实时数据处理需求。</p>',41)],e={},o=(0,s(6262).A)(e,[["render",function(a,n){return(0,t.uX)(),(0,t.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/blog/kafka/Kafka-Stream%E6%B5%81%E5%A4%84%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0.html","title":"Kafka Stream 流处理设计概述","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. Kafka 流处理基本概念","slug":"_1-kafka-流处理基本概念","link":"#_1-kafka-流处理基本概念","children":[]},{"level":3,"title":"2. Kafka Streams 设计原理","slug":"_2-kafka-streams-设计原理","link":"#_2-kafka-streams-设计原理","children":[]},{"level":3,"title":"3. Kafka Streams 核心 API","slug":"_3-kafka-streams-核心-api","link":"#_3-kafka-streams-核心-api","children":[]},{"level":3,"title":"4. Kafka Streams 应用示例","slug":"_4-kafka-streams-应用示例","link":"#_4-kafka-streams-应用示例","children":[]},{"level":3,"title":"5. 优势和使用场景","slug":"_5-优势和使用场景","link":"#_5-优势和使用场景","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720532327000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-Stream流处理设计概述.md"}')}}]);