"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[7406],{3542:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>i});var p=a(641);const e=[(0,p.Fv)('<h1 id="minio-是如何拆分数据多节点存储的" tabindex="-1"><a class="header-anchor" href="#minio-是如何拆分数据多节点存储的"><span>Minio 是如何拆分数据多节点存储的？</span></a></h1><p>MinIO 使用 Reed-Solomon erasure coding 技术，将数据分成多个数据片（data shards）和冗余片（parity shards）。 这些片段被分布存储在不同的节点上。以下是如何将数据拆分并在每个节点存储的详细说明。</p><h3 id="erasure-coding-基础" tabindex="-1"><a class="header-anchor" href="#erasure-coding-基础"><span>Erasure Coding 基础</span></a></h3><p>在 erasure coding 中，数据被分成 n 个数据片和 m 个冗余片。为了恢复原始数据，至少需要 n 个片段（数据片或冗余片）。 典型配置如下：</p><ul><li>(n, m) = (2, 2)：2 个数据片和 2 个冗余片，总共 4 个片段。</li><li>(n, m) = (2, 1)：2 个数据片和 1 个冗余片，总共 3 个片段。</li></ul><h3 id="数据拆分和存储示例" tabindex="-1"><a class="header-anchor" href="#数据拆分和存储示例"><span>数据拆分和存储示例</span></a></h3><h4 id="配置-2-2-4-个节点" tabindex="-1"><a class="header-anchor" href="#配置-2-2-4-个节点"><span>配置 (2, 2) - 4 个节点</span></a></h4><ol><li><p><strong>原始数据</strong>： 假设我们有一个原始数据块 D。</p></li><li><p><strong>数据拆分</strong>：</p><ul><li>D 被分成两个数据片：Data1 和 Data2。</li><li>生成两个冗余片：Parity1 和 Parity2。</li></ul></li><li><p><strong>存储在节点上</strong>：</p><ul><li>Node1 存储 Data1。</li><li>Node2 存储 Data2。</li><li>Node3 存储 Parity1。</li><li>Node4 存储 Parity2。</li></ul></li></ol><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code><span class="line">Node1: Data1</span>\n<span class="line">Node2: Data2</span>\n<span class="line">Node3: Parity1</span>\n<span class="line">Node4: Parity2</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置-2-1-3-个节点" tabindex="-1"><a class="header-anchor" href="#配置-2-1-3-个节点"><span>配置 (2, 1) - 3 个节点</span></a></h4><ol><li><p><strong>原始数据</strong>： 假设我们有一个原始数据块 D。</p></li><li><p><strong>数据拆分</strong>：</p><ul><li>D 被分成两个数据片：Data1 和 Data2。</li><li>生成一个冗余片：Parity1。</li></ul></li><li><p><strong>存储在节点上</strong>：</p><ul><li>Node1 存储 Data1。</li><li>Node2 存储 Data2。</li><li>Node3 存储 Parity1。</li></ul></li></ol><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext" data-title="plaintext"><pre class="language-plaintext"><code><span class="line">Node1: Data1</span>\n<span class="line">Node2: Data2</span>\n<span class="line">Node3: Parity1</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="冗余和容错能力" tabindex="-1"><a class="header-anchor" href="#冗余和容错能力"><span>冗余和容错能力</span></a></h3><h4 id="_2-2-配置的容错能力" tabindex="-1"><a class="header-anchor" href="#_2-2-配置的容错能力"><span>(2, 2) 配置的容错能力</span></a></h4><ul><li>可以容忍最多 2 个节点故障。</li><li>需要至少 2 个数据片才能恢复原始数据。</li></ul><p>例如：</p><ul><li>如果 Node1 和 Node2 都故障，剩下的 Parity1 和 Parity2 可以恢复 Data1 和 Data2。</li><li>如果 Node1 和 Node3 都故障，剩下的 Data2 和 Parity2 可以恢复 Data1。</li></ul><h4 id="_2-1-配置的容错能力" tabindex="-1"><a class="header-anchor" href="#_2-1-配置的容错能力"><span>(2, 1) 配置的容错能力</span></a></h4><ul><li>可以容忍 1 个节点故障。</li><li>需要至少 2 个片段（包括数据片和冗余片）才能恢复原始数据。</li></ul><p>例如：</p><ul><li>如果 Node1 故障，剩下的 Data2 和 Parity1 可以恢复 Data1。</li><li>如果 Node3 故障，剩下的 Data1 和 Data2 已经足够恢复原始数据。</li></ul><h3 id="具体的拆分和存储过程" tabindex="-1"><a class="header-anchor" href="#具体的拆分和存储过程"><span>具体的拆分和存储过程</span></a></h3><ol><li><p><strong>拆分数据</strong>：</p><ul><li>MinIO 使用 Reed-Solomon 算法将原始数据分割成 n 个数据片和 m 个冗余片。</li></ul></li><li><p><strong>存储分片</strong>：</p><ul><li>每个片段被存储在不同的节点上，以确保冗余和高可用性。</li></ul></li><li><p><strong>数据恢复</strong>：</p><ul><li>当一个或多个节点故障时，MinIO 可以使用剩余的片段（数据片和冗余片）重建丢失的数据片，保证数据的可用性。</li></ul></li></ol><h3 id="示例代码-java-使用-reed-solomon-库" tabindex="-1"><a class="header-anchor" href="#示例代码-java-使用-reed-solomon-库"><span>示例代码（Java，使用 Reed-Solomon 库）</span></a></h3><p>以下是使用 Java 和 Reed-Solomon 库实现数据分片和恢复的示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>backblaze<span class="token punctuation">.</span>erasure<span class="token punctuation">.</span></span><span class="token class-name">ReedSolomon</span></span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErasureCodingExample</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">int</span> dataShards <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">int</span> parityShards <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">int</span> totalShards <span class="token operator">=</span> dataShards <span class="token operator">+</span> parityShards<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">int</span> shardSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> shards <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>totalShards<span class="token punctuation">]</span><span class="token punctuation">[</span>shardSize<span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>shardSize <span class="token operator">*</span> dataShards<span class="token punctuation">]</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Fill data with example data</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Split the data into shards</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataShards<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> i <span class="token operator">*</span> shardSize<span class="token punctuation">,</span> shards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shardSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Encode the data shards into parity shards</span></span>\n<span class="line">        <span class="token class-name">ReedSolomon</span> reedSolomon <span class="token operator">=</span> <span class="token class-name">ReedSolomon</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>dataShards<span class="token punctuation">,</span> parityShards<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        reedSolomon<span class="token punctuation">.</span><span class="token function">encodeParity</span><span class="token punctuation">(</span>shards<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shardSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Simulate data loss by clearing one shard</span></span>\n<span class="line">        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>shards<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Decode the data shards</span></span>\n<span class="line">        reedSolomon<span class="token punctuation">.</span><span class="token function">decodeMissing</span><span class="token punctuation">(</span>shards<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> shardSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Verify the recovery</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataShards<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>shards<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> i <span class="token operator">*</span> shardSize<span class="token punctuation">,</span> shardSize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>MinIO 使用 erasure coding 技术将数据分成数据片和冗余片，并分布存储在不同的节点上。根据节点数量的不同，配置 (2, 2) 和 (2, 1) 可以提供不同程度的冗余和容错能力。</p><ul><li><strong>(2, 2) 配置</strong>：需要 4 个节点，容错能力较高，最多可容忍 2 个节点故障。</li><li><strong>(2, 1) 配置</strong>：需要 3 个节点，容错能力有限，最多可容忍 1 个节点故障。</li></ul><p>这种设计确保了数据的高可用性和可靠性，即使在部分节点故障的情况下，系统仍能正常运行。</p>',30)],t={},l=(0,a(6262).A)(t,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,e)}]]),i=JSON.parse('{"path":"/blog/minio/Minio-%E6%98%AF%E5%A6%82%E4%BD%95%E6%8B%86%E5%88%86%E6%95%B0%E6%8D%AE%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AD%98%E5%82%A8%E7%9A%84.html","title":"Minio 是如何拆分数据多节点存储的？","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"Erasure Coding 基础","slug":"erasure-coding-基础","link":"#erasure-coding-基础","children":[]},{"level":3,"title":"数据拆分和存储示例","slug":"数据拆分和存储示例","link":"#数据拆分和存储示例","children":[]},{"level":3,"title":"冗余和容错能力","slug":"冗余和容错能力","link":"#冗余和容错能力","children":[]},{"level":3,"title":"具体的拆分和存储过程","slug":"具体的拆分和存储过程","link":"#具体的拆分和存储过程","children":[]},{"level":3,"title":"示例代码（Java，使用 Reed-Solomon 库）","slug":"示例代码-java-使用-reed-solomon-库","link":"#示例代码-java-使用-reed-solomon-库","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720532327000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-是如何拆分数据多节点存储的.md"}')}}]);