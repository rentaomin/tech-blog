"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[6284],{9974:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>l,data:()=>c});var e=a(641);const t=[(0,e.Fv)('<h1 id="minio-跨中心集群为什么采用异步复制而非构建一个超大集群" tabindex="-1"><a class="header-anchor" href="#minio-跨中心集群为什么采用异步复制而非构建一个超大集群"><span>Minio 跨中心集群为什么采用异步复制而非构建一个超大集群？</span></a></h1><p>在 MinIO 集群中，异地复制和将异地节点直接加入集群是两种不同的策略，它们有各自的适用场景和优缺点。 下面详细介绍为什么异地复制通常是更好的选择，而不是直接将异地节点加入到一个集群中。</p><h3 id="异地复制的优势" tabindex="-1"><a class="header-anchor" href="#异地复制的优势"><span>异地复制的优势</span></a></h3><ol><li><p><strong>地理冗余和高可用性</strong></p><ul><li><p>异地复制允许将数据复制到不同的地理位置，从而提供地理冗余。如果一个数据中心发生故障，另一个数据 中心仍然可以继续提供服务。</p></li><li><p>异地复制策略可以独立于主集群运行，不会因为主集群的故障而影响数据复制和可用性。</p></li></ul></li><li><p><strong>网络延迟和性能</strong></p><ul><li>跨数据中心的网络延迟通常较大。如果将异地节点直接加入到一个集群中，所有节点之间的同步操作都会受到高延迟的影响， 从而导致整体性能下降。</li><li>异地复制是在异步方式下进行的，源集群可以快速响应写入请求，而复制任务则在后台进行，不会影响主集群的性能。</li></ul></li><li><p><strong>数据一致性和复杂性</strong></p><ul><li>在跨地域集群中保持数据一致性是一个复杂的问题，特别是在网络连接不稳定或延迟较高的情况下。异地复制允许在数据不一致 的情况下进行复制，而不是强制保持一致性。</li><li>通过异地复制，可以简化集群管理和维护，避免复杂的网络配置和数据一致性问题。</li></ul></li><li><p><strong>容灾和灾难恢复</strong></p><ul><li>异地复制是容灾和灾难恢复策略中的重要组成部分。通过定期将数据复制到异地集群，可以在主集群发生灾难性故障时快速恢复数 据和服务。</li><li>异地复制可以与快照和备份策略结合使用，提供更高层次的保护。</li></ul></li></ol><h3 id="异地复制-vs-加入异地节点" tabindex="-1"><a class="header-anchor" href="#异地复制-vs-加入异地节点"><span>异地复制 vs. 加入异地节点</span></a></h3><table><thead><tr><th>特点</th><th>异地复制</th><th>加入异地节点到集群</th></tr></thead><tbody><tr><td><strong>地理冗余和高可用性</strong></td><td>提供地理冗余，故障切换简单</td><td>提供冗余，但同步问题复杂，可能影响整体可用性</td></tr><tr><td><strong>网络延迟和性能</strong></td><td>异步复制，主集群性能不受影响</td><td>网络延迟高，影响整体性能</td></tr><tr><td><strong>数据一致性</strong></td><td>异步复制，处理不一致性简单</td><td>同步复制，数据一致性复杂</td></tr><tr><td><strong>容灾和灾难恢复</strong></td><td>容灾简单，灾难恢复快速</td><td>容灾复杂，灾难恢复难度较大</td></tr><tr><td><strong>管理复杂性</strong></td><td>简单，易于管理和维护</td><td>复杂，增加了管理和维护的难度</td></tr></tbody></table><h3 id="异地复制的工作流程" tabindex="-1"><a class="header-anchor" href="#异地复制的工作流程"><span>异地复制的工作流程</span></a></h3><ol><li><p><strong>配置复制策略</strong>： 在源集群上配置复制策略，包括目标集群的地址、访问凭证和需要复制的 bucket。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> sourceMinIO http://source-minio.example.com accessKey secretKey</span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> targetMinIO http://target-minio.example.com accessKey secretKey</span>\n<span class="line"></span>\n<span class="line"><span class="token function">mc</span> replicate <span class="token function">add</span> sourceMinIO/my-bucket --remote-bucket my-bucket --remote-target targetMinIO</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>写入事件通知</strong>： 当客户端向源集群写入数据时，源集群会生成一个写入事件，并将该事件放入复制队列中。</p></li><li><p><strong>异步传输</strong>： 复制队列中的事件由后台任务异步处理，后台任务从复制队列中读取事件，并将对象数据传输到目标集群。</p></li><li><p><strong>目标集群写入</strong>： 目标集群接收到数据后，将数据写入到指定的 bucket 和对象路径中。</p></li><li><p><strong>复制确认</strong>： 目标集群完成数据写入后，向源集群发送确认消息，源集群更新复制状态，标记该事件已完成。</p></li></ol><h3 id="示例代码-配置和管理异步复制" tabindex="-1"><a class="header-anchor" href="#示例代码-配置和管理异步复制"><span>示例代码：配置和管理异步复制</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 配置源和目标 MinIO 集群别名</span></span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> sourceMinIO http://source-minio.example.com accessKey secretKey</span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> targetMinIO http://target-minio.example.com accessKey secretKey</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 添加复制策略，将 sourceMinIO 上的 my-bucket 复制到 targetMinIO 上的 my-bucket</span></span>\n<span class="line"><span class="token function">mc</span> replicate <span class="token function">add</span> sourceMinIO/my-bucket --remote-bucket my-bucket --remote-target targetMinIO</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 查看复制配置</span></span>\n<span class="line"><span class="token function">mc</span> replicate <span class="token function">ls</span> sourceMinIO/my-bucket</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 监控复制任务状态</span></span>\n<span class="line"><span class="token function">mc</span> replicate status sourceMinIO/my-bucket</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>异地复制通过异步传输数据，实现地理冗余和高可用性，避免了跨地域集群同步带来的高延迟和数据一致性问题。相比之下， 将异地节点直接加入到集群中虽然也能提供一定的冗余，但其复杂性和对性能的影响使得在多数情况下异地复制是更优的选 择。异地复制既能提供可靠的容灾和灾难恢复方案，又能简化集群的管理和维护。</p>',12)],i={},l=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),c=JSON.parse('{"path":"/blog/minio/Minio-%E8%B7%A8%E4%B8%AD%E5%BF%83%E9%9B%86%E7%BE%A4%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%87%E7%94%A8%E5%BC%82%E6%AD%A5%E5%A4%8D%E5%88%B6%E8%80%8C%E9%9D%9E%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%B6%85%E5%A4%A7%E9%9B%86%E7%BE%A4.html","title":"Minio 跨中心集群为什么采用异步复制而非构建一个超大集群？","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"异地复制的优势","slug":"异地复制的优势","link":"#异地复制的优势","children":[]},{"level":3,"title":"异地复制 vs. 加入异地节点","slug":"异地复制-vs-加入异地节点","link":"#异地复制-vs-加入异地节点","children":[]},{"level":3,"title":"异地复制的工作流程","slug":"异地复制的工作流程","link":"#异地复制的工作流程","children":[]},{"level":3,"title":"示例代码：配置和管理异步复制","slug":"示例代码-配置和管理异步复制","link":"#示例代码-配置和管理异步复制","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720532327000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-跨中心集群为什么采用异步复制而非构建一个超大集群.md"}')}}]);