"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[2198],{7613:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>t,data:()=>o});var e=s(641);const p=[(0,e.Fv)('<h1 id="kafka-集群原理设计-三-之启动原理介绍" tabindex="-1"><a class="header-anchor" href="#kafka-集群原理设计-三-之启动原理介绍"><span>kafka 集群原理设计(三)之启动原理介绍</span></a></h1><h2 id="业务背景问题描述" tabindex="-1"><a class="header-anchor" href="#业务背景问题描述"><span>业务背景问题描述</span></a></h2><p>现在有三个机器节点192.168.0.200、192.168.0.201、192.168.0.202，分别安装部署zookeeper、 kafka集群，每个topic有3个分区，3个副本，则kafka各个节点在刚启动时，是如何选择哪个Kafka节 点为管理节点，哪个副本为主，其余为副本？</p><p>在 Kafka 集群中，部署 ZooKeeper 和 Kafka 后，各个节点在启动时的行为包括以下几个步骤：</p><ol><li><strong>ZooKeeper 启动和配置</strong>：每个节点启动 ZooKeeper，配置 ZooKeeper 集群。</li><li><strong>Kafka 启动和注册</strong>：每个 Kafka Broker 启动并向 ZooKeeper 注册自身信息。</li><li><strong>Controller 选举</strong>：ZooKeeper 选举出 Kafka Controller。</li><li><strong>Partition 领导者和副本分配</strong>：Kafka Controller 负责分配 Partition 的领导者和副本。</li></ol><p>以下是详细的启动过程、实现原理和核心代码示意：</p><h3 id="_1-zookeeper-启动和配置" tabindex="-1"><a class="header-anchor" href="#_1-zookeeper-启动和配置"><span>1. ZooKeeper 启动和配置</span></a></h3><p>每个机器节点启动 ZooKeeper，并配置集群。</p><h4 id="配置文件-zoo-cfg-示例" tabindex="-1"><a class="header-anchor" href="#配置文件-zoo-cfg-示例"><span>配置文件 (<code>zoo.cfg</code>) 示例：</span></a></h4><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">tickTime</span><span class="token punctuation">=</span><span class="token value attr-value">2000</span></span>\n<span class="line"><span class="token key attr-name">dataDir</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/zookeeper</span></span>\n<span class="line"><span class="token key attr-name">clientPort</span><span class="token punctuation">=</span><span class="token value attr-value">2181</span></span>\n<span class="line"><span class="token key attr-name">initLimit</span><span class="token punctuation">=</span><span class="token value attr-value">5</span></span>\n<span class="line"><span class="token key attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token value attr-value">2</span></span>\n<span class="line"><span class="token key attr-name">server.1</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.0.200:2888:3888</span></span>\n<span class="line"><span class="token key attr-name">server.2</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.0.201:2888:3888</span></span>\n<span class="line"><span class="token key attr-name">server.3</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.0.202:2888:3888</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-zookeeper" tabindex="-1"><a class="header-anchor" href="#启动-zookeeper"><span>启动 ZooKeeper：</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 在每个节点上执行</span></span>\n<span class="line">bin/zkServer.sh start</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-kafka-启动和注册" tabindex="-1"><a class="header-anchor" href="#_2-kafka-启动和注册"><span>2. Kafka 启动和注册</span></a></h3><p>每个 Kafka Broker 启动并向 ZooKeeper 注册自身信息。</p><h4 id="配置文件-server-properties-示例" tabindex="-1"><a class="header-anchor" href="#配置文件-server-properties-示例"><span>配置文件 (<code>server.properties</code>) 示例：</span></a></h4><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">0</span></span>\n<span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://192.168.0.200:9092</span></span>\n<span class="line"><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/kafka/logs</span></span>\n<span class="line"><span class="token key attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token value attr-value">192.168.0.200:2181,192.168.0.201:2181,192.168.0.202:2181</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="启动-kafka-broker" tabindex="-1"><a class="header-anchor" href="#启动-kafka-broker"><span>启动 Kafka Broker：</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 在每个节点上执行</span></span>\n<span class="line">bin/kafka-server-start.sh config/server.properties</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-controller-选举" tabindex="-1"><a class="header-anchor" href="#_3-controller-选举"><span>3. Controller 选举</span></a></h3><p>当所有 Broker 启动后，ZooKeeper 开始选举 Kafka Controller。Controller 是负责管理集群范 围内的管理任务的 Broker。</p><h4 id="核心代码示例-controllerelection-scala" tabindex="-1"><a class="header-anchor" href="#核心代码示例-controllerelection-scala"><span>核心代码示例（ControllerElection.scala）：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ControllerElection</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  def elect<span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    val currentControllerId <span class="token operator">=</span> <span class="token function">getControllerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentControllerId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      val newControllerId <span class="token operator">=</span> <span class="token function">electController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>newControllerId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">info</span><span class="token punctuation">(</span>s<span class="token string">&quot;Successfully elected controller $newControllerId&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        newControllerId</span>\n<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to elect controller&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token operator">-</span><span class="token number">1</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token function">info</span><span class="token punctuation">(</span>s<span class="token string">&quot;Controller already elected: $currentControllerId&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">      currentControllerId</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  </span>\n<span class="line">  <span class="token keyword">private</span> def <span class="token function">electController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 创建 /controller 节点，如果成功则当前 Broker 成为 Controller</span></span>\n<span class="line">    val createResponse <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">createControllerNode</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>createResponse<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      brokerId</span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token operator">-</span><span class="token number">1</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line">  </span>\n<span class="line">  <span class="token keyword">private</span> def <span class="token function">getControllerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 获取当前的 Controller ID</span></span>\n<span class="line">    val controllerData <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    controllerData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>brokerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-partition-领导者和副本分配" tabindex="-1"><a class="header-anchor" href="#_4-partition-领导者和副本分配"><span>4. Partition 领导者和副本分配</span></a></h3><p>Controller 负责分配 Partition 的领导者和副本。在创建 Topic 时，指定 Partition 数量和副本 因子，Controller 会分配领导者和副本。</p><h4 id="创建-topic-示例" tabindex="-1"><a class="header-anchor" href="#创建-topic-示例"><span>创建 Topic 示例：</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建 Topic &quot;my_topic&quot;，有 3 个分区和 3 个副本</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> my_topic --bootstrap-server localhost:9092 </span>\n<span class="line"><span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="核心代码示例-partitionleaderelection-scala" tabindex="-1"><a class="header-anchor" href="#核心代码示例-partitionleaderelection-scala"><span>核心代码示例（PartitionLeaderElection.scala）：</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PartitionLeaderElection</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  def <span class="token function">electLeader</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Option</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    val leaderAndIsr <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getLeaderAndIsrForPartition</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">    val newLeader <span class="token operator">=</span> <span class="token function">selectLeader</span><span class="token punctuation">(</span>leaderAndIsr<span class="token punctuation">.</span>isr<span class="token punctuation">)</span></span>\n<span class="line">    newLeader<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> leader <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">      zooKeeperClient<span class="token punctuation">.</span><span class="token function">updateLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> leaderAndIsr<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>leader <span class="token operator">=</span> leader<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    newLeader</span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">private</span> def <span class="token function">selectLeader</span><span class="token punctuation">(</span>isr<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Option</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 从 ISR 列表中选出新的 Leader</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>isr<span class="token punctuation">.</span>nonEmpty<span class="token punctuation">)</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>isr<span class="token punctuation">.</span>head<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token class-name">None</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动过程实现原理详细介绍" tabindex="-1"><a class="header-anchor" href="#启动过程实现原理详细介绍"><span>启动过程实现原理详细介绍</span></a></h3><h4 id="_1-zookeeper-启动和配置-1" tabindex="-1"><a class="header-anchor" href="#_1-zookeeper-启动和配置-1"><span>1. ZooKeeper 启动和配置</span></a></h4><ul><li>每个节点启动 ZooKeeper。</li><li>ZooKeeper 实例相互通信，形成一个 ZooKeeper 集群。</li><li>ZooKeeper 通过配置文件中的 server 配置确保每个节点的唯一性和集群一致性。</li></ul><h4 id="_2-kafka-启动和注册-1" tabindex="-1"><a class="header-anchor" href="#_2-kafka-启动和注册-1"><span>2. Kafka 启动和注册</span></a></h4><ul><li>每个 Kafka Broker 启动，并通过配置文件中的 zookeeper.connect 参数连接到 ZooKeeper。</li><li>启动过程中，Kafka Broker 会向 ZooKeeper 注册自身信息，如 <code>broker.id</code> 和网络地址。</li></ul><h4 id="_3-controller-选举-1" tabindex="-1"><a class="header-anchor" href="#_3-controller-选举-1"><span>3. Controller 选举</span></a></h4><ul><li><p>Kafka Broker 启动后，ZooKeeper 选举出一个 Controller。Controller 负责管理集群范围内的 管理任务。</p></li><li><p>通过创建 <code>/controller</code> 节点，ZooKeeper 确定当前的 Controller。第一个成功创建该节点的 Broker 成为 Controller。</p></li></ul><h4 id="_4-partition-领导者和副本分配-1" tabindex="-1"><a class="header-anchor" href="#_4-partition-领导者和副本分配-1"><span>4. Partition 领导者和副本分配</span></a></h4><ul><li>创建 Topic 时指定 Partition 数量和副本因子。</li><li>Controller 负责将每个 Partition 分配给 Broker，并确定每个 Partition 的 Leader 和 Follower。</li><li>ZooKeeper 维护 Partition 的元数据，包括 Leader 和 ISR 列表。</li></ul><h3 id="示例说明" tabindex="-1"><a class="header-anchor" href="#示例说明"><span>示例说明</span></a></h3><p>在启动过程中，Kafka 集群通过 ZooKeeper 协调多个 Broker 的工作，确保每个 Partition 有一个 Leader 和多个 Follower，实现高可用性和负载均衡。</p><ol><li><strong>启动 ZooKeeper</strong>：确保每个节点的 ZooKeeper 实例正确启动和配置。</li><li><strong>启动 Kafka Broker</strong>：每个 Broker 启动并向 ZooKeeper 注册。</li><li><strong>Controller 选举</strong>：ZooKeeper 选举出一个 Controller 负责集群管理任务。</li><li><strong>Partition 分配</strong>：Controller 分配 Partition 的 Leader 和 Follower，并通过 ZooKeeper 维护 这些元数据。</li></ol><p>通过上述过程和核心代码示例，Kafka 集群实现了多个 Broker 的协同工作，确保数据的分布和高可用性。这些机制 和实现原理是理解 Kafka 集群设计和运作的关键。</p>',41)],l={},t=(0,s(6262).A)(l,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),o=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86%E8%AE%BE%E8%AE%A1(%E4%B8%89)%E4%B9%8B%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D.html","title":"kafka 集群原理设计(三)之启动原理介绍","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":2,"title":"业务背景问题描述","slug":"业务背景问题描述","link":"#业务背景问题描述","children":[{"level":3,"title":"1. ZooKeeper 启动和配置","slug":"_1-zookeeper-启动和配置","link":"#_1-zookeeper-启动和配置","children":[]},{"level":3,"title":"2. Kafka 启动和注册","slug":"_2-kafka-启动和注册","link":"#_2-kafka-启动和注册","children":[]},{"level":3,"title":"3. Controller 选举","slug":"_3-controller-选举","link":"#_3-controller-选举","children":[]},{"level":3,"title":"4. Partition 领导者和副本分配","slug":"_4-partition-领导者和副本分配","link":"#_4-partition-领导者和副本分配","children":[]},{"level":3,"title":"启动过程实现原理详细介绍","slug":"启动过程实现原理详细介绍","link":"#启动过程实现原理详细介绍","children":[]},{"level":3,"title":"示例说明","slug":"示例说明","link":"#示例说明","children":[]}]}],"git":{"updatedTime":1720534160000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群原理设计(三)之启动原理介绍.md"}')}}]);