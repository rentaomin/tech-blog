"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[1916],{3377:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>l});var p=a(641);const t=[(0,p.Fv)('<h1 id="minio-集群是如何处理客户端请求" tabindex="-1"><a class="header-anchor" href="#minio-集群是如何处理客户端请求"><span>Minio 集群是如何处理客户端请求？</span></a></h1><p>MinIO 集群是一个无中心（leaderless）的分布式对象存储系统，这意味着它不依赖于传统的 leader-follower 模型来处理请求和协调节点。相反，MinIO 使用一致性哈希和分布式锁等技术 来确保数据的一致性和高可用性。以下是 MinIO 集群接收客户端请求并响应的完整设计实现。</p><h3 id="minio-集群架构" tabindex="-1"><a class="header-anchor" href="#minio-集群架构"><span>MinIO 集群架构</span></a></h3><ol><li><strong>节点（Node）</strong>：每个 MinIO 节点都是对等的，能够处理客户端请求并存储数据。</li><li><strong>数据分片和冗余</strong>：MinIO 使用 erasure coding 技术将数据分片和冗余存储在多个节点上，以确 保高可用性和数据可靠性。</li><li><strong>无中心架构</strong>：没有单一的 leader 节点，每个节点都能独立处理读写请求。</li></ol><h3 id="客户端请求处理流程" tabindex="-1"><a class="header-anchor" href="#客户端请求处理流程"><span>客户端请求处理流程</span></a></h3><h4 id="_1-客户端发送请求" tabindex="-1"><a class="header-anchor" href="#_1-客户端发送请求"><span>1. 客户端发送请求</span></a></h4><p>客户端使用 S3 兼容 API 发送请求（例如 PUT、GET 请求）到 MinIO 集群中的某个节点。客户端可以通过负 载均衡器或直接指定节点 IP 来发送请求。</p><h4 id="_2-节点接收请求" tabindex="-1"><a class="header-anchor" href="#_2-节点接收请求"><span>2. 节点接收请求</span></a></h4><p>接收到请求的节点称为入口节点（Gateway Node），负责处理该请求。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line">http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">,</span> handleUpload<span class="token punctuation">)</span></span>\n<span class="line">http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:9000&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">handleUpload</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 处理上传请求</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-数据分片和存储" tabindex="-1"><a class="header-anchor" href="#_3-数据分片和存储"><span>3. 数据分片和存储</span></a></h4><p>入口节点根据数据大小和集群配置，使用 erasure coding 技术将数据分成多个数据片和冗余片。然后并行将这些片 段存储到不同的节点上。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>\n<span class="line">    <span class="token string">&quot;github.com/klauspost/reedsolomon&quot;</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">storeData</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> nodes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>\n<span class="line">    enc<span class="token punctuation">,</span> err <span class="token operator">:=</span> reedsolomon<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    shards<span class="token punctuation">,</span> err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    err <span class="token operator">=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>shards<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">for</span> i<span class="token punctuation">,</span> shard <span class="token operator">:=</span> <span class="token keyword">range</span> shards <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">go</span> <span class="token function">uploadShard</span><span class="token punctuation">(</span>shard<span class="token punctuation">,</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">uploadShard</span><span class="token punctuation">(</span>shard <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 将 shard 上传到 node</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数据一致性和分布式锁" tabindex="-1"><a class="header-anchor" href="#_4-数据一致性和分布式锁"><span>4. 数据一致性和分布式锁</span></a></h4><p>MinIO 使用分布式锁来确保并发写操作的原子性和一致性。分布式锁通常由 etcd 或其他分布式协调服务实现。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>\n<span class="line">    <span class="token string">&quot;go.etcd.io/etcd/clientv3&quot;</span></span>\n<span class="line">    <span class="token string">&quot;context&quot;</span></span>\n<span class="line">    <span class="token string">&quot;time&quot;</span></span>\n<span class="line"><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span>client <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> lockKey <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>clientv3<span class="token punctuation">.</span>LeaseGrantResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    lease<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Grant</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    txn <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Txn</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">If</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span><span class="token function">Compare</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span><span class="token function">CreateRevision</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>\n<span class="line">        <span class="token function">Then</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span><span class="token function">OpPut</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> clientv3<span class="token punctuation">.</span><span class="token function">WithLease</span><span class="token punctuation">(</span>lease<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span></span>\n<span class="line">        <span class="token function">Else</span><span class="token punctuation">(</span>clientv3<span class="token punctuation">.</span><span class="token function">OpGet</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    txnResp<span class="token punctuation">,</span> err <span class="token operator">:=</span> txn<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>txnResp<span class="token punctuation">.</span>Succeeded <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;lock is already held&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> lease<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span>client <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> lockKey <span class="token builtin">string</span><span class="token punctuation">,</span> lease <span class="token operator">*</span>clientv3<span class="token punctuation">.</span>LeaseGrantResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Revoke</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lease<span class="token punctuation">.</span>ID<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">return</span> err</span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-数据写入确认" tabindex="-1"><a class="header-anchor" href="#_5-数据写入确认"><span>5. 数据写入确认</span></a></h4><p>各个节点接收到数据片段后，会返回确认信息给入口节点。入口节点在收到足够多的确认（通常是多数节点确认）后，返回成功响应 给客户端。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">handleUpload</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 从请求中读取数据</span></span>\n<span class="line">    nodes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;node1:9000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node2:9000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node3:9000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;node4:9000&quot;</span><span class="token punctuation">}</span></span>\n<span class="line">    err <span class="token operator">:=</span> <span class="token function">storeData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> nodes<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Failed to store data&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">return</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-数据读取请求" tabindex="-1"><a class="header-anchor" href="#_6-数据读取请求"><span>6. 数据读取请求</span></a></h4><p>当客户端发送读取请求时，入口节点根据请求的数据键，计算出数据片和冗余片存储的节点位置，并从这些节点并行读取数据片段， 然后重建原始数据并返回给客户端。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">handleDownload</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 根据请求计算数据片和冗余片位置</span></span>\n<span class="line">    dataShards <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> node <span class="token operator">:=</span> <span class="token keyword">range</span> nodes <span class="token punctuation">{</span></span>\n<span class="line">        shard <span class="token operator">:=</span> <span class="token function">downloadShard</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>\n<span class="line">        dataShards <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>dataShards<span class="token punctuation">,</span> shard<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> reedsolomon<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Reconstruct</span><span class="token punctuation">(</span>dataShards<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Failed to reconstruct data&quot;</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">return</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">downloadShard</span><span class="token punctuation">(</span>node <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 从节点下载 shard</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据一致性和高可用性" tabindex="-1"><a class="header-anchor" href="#数据一致性和高可用性"><span>数据一致性和高可用性</span></a></h3><p>MinIO 通过以下机制确保数据一致性和高可用性：</p><ol><li><strong>分布式锁</strong>：确保并发写操作的原子性和一致性。</li><li><strong>Erasure Coding</strong>：使用 Reed-Solomon 算法将数据分片和冗余存储，确保数据的高可用性和可靠性。</li><li><strong>心跳机制</strong>：节点之间定期发送心跳信号，检测节点存活状态。</li><li><strong>自动恢复</strong>：检测到节点故障时，从剩余的数据片和冗余片中恢复丢失的数据片，并重新分配到健康节点上。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>MinIO 集群是一个无中心的分布式对象存储系统，通过一致性哈希、分布式锁和 erasure coding 技术实现数据的一致性和 高可用性。客户端发送请求时，入口节点负责数据分片、存储和一致性检查，确保数据在多个节点上的分布和可靠存储。在读取 数据时，入口节点根据存储策略并行读取数据片段，并重建原始数据返回给客户端。通过这些机制，MinIO 提供了高性能、高可 靠的对象存储服务。</p>',27)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/blog/minio/Minio-%E9%9B%86%E7%BE%A4%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%B7%E6%B1%82.html","title":"Minio 集群是如何处理客户端请求？","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"MinIO 集群架构","slug":"minio-集群架构","link":"#minio-集群架构","children":[]},{"level":3,"title":"客户端请求处理流程","slug":"客户端请求处理流程","link":"#客户端请求处理流程","children":[]},{"level":3,"title":"数据一致性和高可用性","slug":"数据一致性和高可用性","link":"#数据一致性和高可用性","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720534160000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-集群是如何处理客户端请求.md"}')}}]);