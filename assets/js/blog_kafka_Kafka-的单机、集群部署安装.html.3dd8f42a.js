"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[3949],{7001:(a,s,e)=>{e.r(s),e.d(s,{comp:()=>p,data:()=>t});var n=e(641);const i=[(0,n.Fv)('<h1 id="kafka的单机、集群部署安装" tabindex="-1"><a class="header-anchor" href="#kafka的单机、集群部署安装"><span>kafka的单机、集群部署安装</span></a></h1><p>Kafka 的部署可以分为单机部署和集群部署。以下是详细的单机和集群部署步骤。</p><h3 id="单机部署-kafka" tabindex="-1"><a class="header-anchor" href="#单机部署-kafka"><span>单机部署 Kafka</span></a></h3><p>单机部署 Kafka 通常用于开发和测试环境。下文中涉及相关端口，若开启防火墙则需要开放对应的端口， 以下是详细步骤：</p><h4 id="_1-安装-java" tabindex="-1"><a class="header-anchor" href="#_1-安装-java"><span>1. 安装 Java</span></a></h4><p>Kafka 依赖于 Java 环境，因此需要先安装 Java。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 安装 Java</span></span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> default-jdk</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-下载-kafka" tabindex="-1"><a class="header-anchor" href="#_2-下载-kafka"><span>2. 下载 Kafka</span></a></h4><p>从 <a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener noreferrer">Apache Kafka 官方网站</a> 下载 Kafka 二进制文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> https://dlcdn.apache.org/kafka/3.7.0/kafka_2.13-3.7.0.tgz</span>\n<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> kafka_2.13-3.7.0.tgz</span>\n<span class="line"><span class="token builtin class-name">cd</span> kafka_2.13-3.7.0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-启动-zookeeper" tabindex="-1"><a class="header-anchor" href="#_3-启动-zookeeper"><span>3. 启动 ZooKeeper</span></a></h4><p>Kafka 依赖于 ZooKeeper 进行协调，因此需要先启动 ZooKeeper。Kafka 提供了一个内置的 ZooKeeper 脚本。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 ZooKeeper ，该安装步骤可参考之前的文章 zookeeper 安装教程</span></span>\n<span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-启动-kafka-broker" tabindex="-1"><a class="header-anchor" href="#_4-启动-kafka-broker"><span>4. 启动 Kafka Broker</span></a></h4><p>在启动 ZooKeeper 后，启动 Kafka Broker。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka Broker</span></span>\n<span class="line">bin/kafka-server-start.sh config/server.properties</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-创建-topic" tabindex="-1"><a class="header-anchor" href="#_5-创建-topic"><span>5. 创建 Topic</span></a></h4><p>启动 Kafka 后，可以创建一个 Topic。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建一个名为 &quot;test&quot; 的 Topic</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --bootstrap-server localhost:9092 <span class="token parameter variable">--partitions</span> <span class="token number">1</span> --replication-factor <span class="token number">1</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-生产者发送消息" tabindex="-1"><a class="header-anchor" href="#_6-生产者发送消息"><span>6. 生产者发送消息</span></a></h4><p>启动一个 Kafka 生产者并发送消息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka 生产者</span></span>\n<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --bootstrap-server localhost:9092</span>\n<span class="line"><span class="token comment"># 在生产者控制台输入消息并按回车发送</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-消费者消费消息" tabindex="-1"><a class="header-anchor" href="#_7-消费者消费消息"><span>7. 消费者消费消息</span></a></h4><p>启动一个 Kafka 消费者并接收消息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka 消费者</span></span>\n<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --from-beginning --bootstrap-server localhost:9092</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="集群部署-kafka" tabindex="-1"><a class="header-anchor" href="#集群部署-kafka"><span>集群部署 Kafka</span></a></h3><p>集群部署 Kafka 通常用于生产环境，以实现高可用性和高吞吐量。以下是详细步骤：</p><h4 id="_1-准备环境" tabindex="-1"><a class="header-anchor" href="#_1-准备环境"><span>1. 准备环境</span></a></h4><p>假设我们有三台机器：<code>kafka1</code>, <code>kafka2</code>, <code>kafka3</code>。</p><h4 id="_2-安装-java" tabindex="-1"><a class="header-anchor" href="#_2-安装-java"><span>2. 安装 Java</span></a></h4><p>在每台机器上安装 Java。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 安装 Java</span></span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> default-jdk</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-下载-kafka" tabindex="-1"><a class="header-anchor" href="#_3-下载-kafka"><span>3. 下载 Kafka</span></a></h4><p>在每台机器上下载 Kafka 二进制文件。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> https://dlcdn.apache.org/kafka/3.7.0/kafka_2.13-3.7.0.tgz</span>\n<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> kafka_2.13-3.7.0.tgz</span>\n<span class="line"><span class="token builtin class-name">cd</span> kafka_2.13-3.7.0</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-配置-zookeeper" tabindex="-1"><a class="header-anchor" href="#_4-配置-zookeeper"><span>4. 配置 ZooKeeper</span></a></h4><p>在每台机器上编辑 <code>config/zookeeper.properties</code> 文件，确保每个 ZooKeeper 节点都有唯一的 ID。</p><p><strong>kafka1</strong> 的 <code>zookeeper.properties</code>：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">tickTime</span><span class="token punctuation">=</span><span class="token value attr-value">2000</span></span>\n<span class="line"><span class="token key attr-name">dataDir</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/zookeeper</span></span>\n<span class="line"><span class="token key attr-name">clientPort</span><span class="token punctuation">=</span><span class="token value attr-value">2181</span></span>\n<span class="line"><span class="token key attr-name">initLimit</span><span class="token punctuation">=</span><span class="token value attr-value">5</span></span>\n<span class="line"><span class="token key attr-name">syncLimit</span><span class="token punctuation">=</span><span class="token value attr-value">2</span></span>\n<span class="line"><span class="token key attr-name">server.1</span><span class="token punctuation">=</span><span class="token value attr-value">kafka1:2888:3888</span></span>\n<span class="line"><span class="token key attr-name">server.2</span><span class="token punctuation">=</span><span class="token value attr-value">kafka2:2888:3888</span></span>\n<span class="line"><span class="token key attr-name">server.3</span><span class="token punctuation">=</span><span class="token value attr-value">kafka3:2888:3888</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>dataDir</code> 目录下创建一个 <code>myid</code> 文件，文件内容为该节点的 ID，例如 <code>kafka1</code> 的 <code>myid</code> 文件内容为 <code>1</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">&gt;</span> /var/lib/zookeeper/myid</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>kafka2</strong> 和 <strong>kafka3</strong> 的 <code>zookeeper.properties</code> 文件类似，<code>myid</code> 文件内容分别为 <code>2</code> 和 <code>3</code>，kafka1、kafka2、kafka3为对应的部署机器ip地址或域名</p><h4 id="_5-启动-zookeeper-集群" tabindex="-1"><a class="header-anchor" href="#_5-启动-zookeeper-集群"><span>5. 启动 ZooKeeper 集群</span></a></h4><p>在每台机器上启动 ZooKeeper。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 ZooKeeper</span></span>\n<span class="line">bin/zookeeper-server-start.sh config/zookeeper.properties</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-配置-kafka-broker" tabindex="-1"><a class="header-anchor" href="#_6-配置-kafka-broker"><span>6. 配置 Kafka Broker</span></a></h4><p>在每台机器上编辑 <code>config/server.properties</code> 文件，配置 Kafka Broker。</p><p><strong>kafka1</strong> 的 <code>server.properties</code>：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="line"><span class="token key attr-name">broker.id</span><span class="token punctuation">=</span><span class="token value attr-value">1</span></span>\n<span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://kafka1:9092</span></span>\n<span class="line"><span class="token key attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token value attr-value">/var/lib/kafka</span></span>\n<span class="line"><span class="token key attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token value attr-value">kafka1:2181,kafka2:2181,kafka3:2181</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>kafka2</strong> 和 <strong>kafka3</strong> 的 <code>server.properties</code> 文件类似，<code>broker.id</code> 分别为 <code>2</code> 和 <code>3</code>。</p><h4 id="_7-启动-kafka-broker-集群" tabindex="-1"><a class="header-anchor" href="#_7-启动-kafka-broker-集群"><span>7. 启动 Kafka Broker 集群</span></a></h4><p>在每台机器上启动 Kafka Broker。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka Broker</span></span>\n<span class="line">bin/kafka-server-start.sh config/server.properties</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-创建-topic" tabindex="-1"><a class="header-anchor" href="#_8-创建-topic"><span>8. 创建 Topic</span></a></h4><p>在任意一台机器上创建一个 Topic。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建一个名为 &quot;test&quot; 的 Topic</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --bootstrap-server kafka1:9092 <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9-生产者发送消息" tabindex="-1"><a class="header-anchor" href="#_9-生产者发送消息"><span>9. 生产者发送消息</span></a></h4><p>启动一个 Kafka 生产者并发送消息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka 生产者</span></span>\n<span class="line">bin/kafka-console-producer.sh <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --bootstrap-server kafka1:9092</span>\n<span class="line"><span class="token comment"># 在生产者控制台输入消息并按回车发送</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-消费者消费消息" tabindex="-1"><a class="header-anchor" href="#_10-消费者消费消息"><span>10. 消费者消费消息</span></a></h4><p>启动一个 Kafka 消费者并接收消息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 启动 Kafka 消费者</span></span>\n<span class="line">bin/kafka-console-consumer.sh <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --from-beginning --bootstrap-server kafka1:9092</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过上述步骤，可以完成 Kafka 的单机和集群部署。单机部署适用于开发和测试环境，而集群部署适用于生产环境，能够提供高可用性和高吞吐量。作为架构师，掌握这些基本部署和配置步骤，对于设计和维护 Kafka 系统至关重要。</p>',64)],l={},p=(0,e(6262).A)(l,[["render",function(a,s){return(0,n.uX)(),(0,n.CE)("div",null,i)}]]),t=JSON.parse('{"path":"/blog/kafka/Kafka-%E7%9A%84%E5%8D%95%E6%9C%BA%E3%80%81%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85.html","title":"kafka的单机、集群部署安装","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"单机部署 Kafka","slug":"单机部署-kafka","link":"#单机部署-kafka","children":[]},{"level":3,"title":"集群部署 Kafka","slug":"集群部署-kafka","link":"#集群部署-kafka","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720534160000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-的单机、集群部署安装.md"}')}}]);