"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[446],{7292:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>o});var e=a(641);const p=[(0,e.Fv)('<h1 id="kafka-集群状态监测、故障切换机制原理" tabindex="-1"><a class="header-anchor" href="#kafka-集群状态监测、故障切换机制原理"><span>Kafka 集群状态监测、故障切换机制原理</span></a></h1><p>Kafka 的状态监测、故障检测和数据变化的实现方式确实依赖于 ZooKeeper 进行协调和管理，但具体机 制包括 ZooKeeper 监听和 Kafka 内部逻辑的结合。以下是详细说明：</p><h3 id="_1-zookeeper-监听机制" tabindex="-1"><a class="header-anchor" href="#_1-zookeeper-监听机制"><span>1. ZooKeeper 监听机制</span></a></h3><p>Kafka 使用 ZooKeeper 的监听机制来监测状态变化和进行故障检测。当 ZooKeeper 中的节点（如 <code>/brokers/ids</code>、<code>/controller</code>、<code>/topics</code>）发生变化时，Kafka 的 ZooKeeper 客户端会收到 通知，并根据这些变化执行相应的操作。</p><h3 id="_2-kafka-内部的状态机机制" tabindex="-1"><a class="header-anchor" href="#_2-kafka-内部的状态机机制"><span>2. Kafka 内部的状态机机制</span></a></h3><p>Kafka 使用内部的状态机机制来管理分区和副本的状态。PartitionStateMachine 和 ReplicaStateMachine 是 Kafka 内部的两个关键组件，它们根据 ZooKeeper 的通知和内部逻辑来处理状态变化和故障恢复。</p><h3 id="详细实现原理" tabindex="-1"><a class="header-anchor" href="#详细实现原理"><span>详细实现原理</span></a></h3><h4 id="_1-状态监测" tabindex="-1"><a class="header-anchor" href="#_1-状态监测"><span>1. 状态监测</span></a></h4><p>Kafka 通过 ZooKeeper 监听来监测 Broker、Controller、Partition 和 Replica 的状态变化。</p><ul><li><strong>Broker 监听</strong>：监听 <code>/brokers/ids</code> 节点，监控 Broker 的上线和下线。</li><li><strong>Controller 监听</strong>：监听 <code>/controller</code> 节点，监控 Controller 的选举和变更。</li><li><strong>Partition 和 Replica 监听</strong>：监听分区和副本的状态变化，主要通过 <code>/brokers/topics/[topic] /partitions/[partition]/state</code> 和 <code>/brokers/topics/[topic]/partitions/[partition]/state/isr</code> 节点。</li></ul><h4 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// KafkaController.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 监听 Broker 变化</span></span>\n<span class="line">        zooKeeperClient<span class="token punctuation">.</span><span class="token function">subscribeBrokerChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BrokerChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 监听 Controller 变化</span></span>\n<span class="line">        zooKeeperClient<span class="token punctuation">.</span><span class="token function">subscribeControllerChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ControllerChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 监听 Topic 和 Partition 变化</span></span>\n<span class="line">        zooKeeperClient<span class="token punctuation">.</span><span class="token function">subscribeTopicChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-故障检测和数据变化" tabindex="-1"><a class="header-anchor" href="#_2-故障检测和数据变化"><span>2. 故障检测和数据变化</span></a></h4><p>当检测到状态变化或故障时，Kafka Controller 会触发相应的状态机操作来处理这些事件。</p><ul><li><strong>分区状态机（PartitionStateMachine）</strong>：处理分区的状态变化，如在线、离线、Leader 选举等。</li><li><strong>副本状态机（ReplicaStateMachine）</strong>：处理副本的状态变化，如同步、脱机等。</li></ul><h4 id="故障检测示例" tabindex="-1"><a class="header-anchor" href="#故障检测示例"><span>故障检测示例</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PartitionStateMachine</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token class-name">KafkaController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">handleStateChanges</span><span class="token punctuation">(</span>partitions<span class="token operator">:</span> <span class="token class-name">Set</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetState<span class="token operator">:</span> <span class="token class-name">PartitionState</span><span class="token punctuation">,</span> assignments<span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val currentState <span class="token operator">=</span> controllerContext<span class="token punctuation">.</span><span class="token function">partitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            targetState match <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OnlinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为在线状态</span></span>\n<span class="line">                    <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token function">assignments</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OfflinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为离线状态</span></span>\n<span class="line">                    <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> assignedReplicas<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 选举 Leader 并更新 ISR 列表</span></span>\n<span class="line">        val leader <span class="token operator">=</span> assignedReplicas<span class="token punctuation">.</span>head</span>\n<span class="line">        val isr <span class="token operator">=</span> assignedReplicas</span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putPartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 将分区设置为 Follower 状态</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">removePartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">deleteLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-监听和处理的结合" tabindex="-1"><a class="header-anchor" href="#_3-监听和处理的结合"><span>3. 监听和处理的结合</span></a></h3><p>Kafka 的状态监测和故障处理机制是通过 ZooKeeper 监听和 Kafka 内部状态机结合实现的。具体步骤如下：</p><ol><li><strong>ZooKeeper 监听</strong>：Kafka 通过 ZooKeeper 监听节点变化，获取 Broker、Controller、Partition 和 Replica 的状态变化通知。</li><li><strong>状态机处理</strong>：Kafka Controller 收到通知后，通过内部的状态机（PartitionStateMachine 和 ReplicaStateMachine）进行处理，执行相应的状态变更和故障恢复操作。</li><li><strong>数据同步和一致性</strong>：状态机在处理状态变化时，会更新 ZooKeeper 中的相关节点，确保集群的一致性 和数据同步。</li></ol><h3 id="具体实现示例" tabindex="-1"><a class="header-anchor" href="#具体实现示例"><span>具体实现示例</span></a></h3><h4 id="监听-broker-变化" tabindex="-1"><a class="header-anchor" href="#监听-broker-变化"><span>监听 Broker 变化</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">BrokerChangeListener</span> <span class="token keyword">extends</span> <span class="token class-name">ZooKeeperClient<span class="token punctuation">.</span>BrokerChangeListener</span> <span class="token punctuation">{</span></span>\n<span class="line">    override def <span class="token function">handleBrokerChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 获取最新的 Broker 列表</span></span>\n<span class="line">        val allBrokers <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getAllBrokersInCluster</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 更新 Controller 上的 Broker 信息</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">setLiveBrokers</span><span class="token punctuation">(</span>allBrokers<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 触发相应的状态机操作</span></span>\n<span class="line">        <span class="token function">onBrokerChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="监听-controller-变化" tabindex="-1"><a class="header-anchor" href="#监听-controller-变化"><span>监听 Controller 变化</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ControllerChangeListener</span> <span class="token keyword">extends</span> <span class="token class-name">ZooKeeperClient<span class="token punctuation">.</span>ControllerChangeListener</span> <span class="token punctuation">{</span></span>\n<span class="line">    override def <span class="token function">handleControllerChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 获取当前的 Controller</span></span>\n<span class="line">        val currentControllerId <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 更新 Controller 状态</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentControllerId <span class="token operator">==</span> config<span class="token punctuation">.</span>brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// 当前 Broker 成为新的 Controller</span></span>\n<span class="line">            <span class="token function">onControllerFailover</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// 当前 Broker 不是 Controller</span></span>\n<span class="line">            <span class="token function">onControllerResignation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="监听-topic-和-partition-变化" tabindex="-1"><a class="header-anchor" href="#监听-topic-和-partition-变化"><span>监听 Topic 和 Partition 变化</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TopicChangeListener</span> <span class="token keyword">extends</span> <span class="token class-name">ZooKeeperClient<span class="token punctuation">.</span>TopicChangeListener</span> <span class="token punctuation">{</span></span>\n<span class="line">    override def <span class="token function">handleTopicChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 获取最新的 Topic 列表</span></span>\n<span class="line">        val allTopics <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getAllTopics</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 更新 Controller 上的 Topic 信息</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">setAllTopics</span><span class="token punctuation">(</span>allTopics<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token comment">// 触发相应的状态机操作</span></span>\n<span class="line">        <span class="token function">onTopicChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>Kafka 的状态监测、故障检测和数据变化通过 ZooKeeper 监听和 Kafka 内部状态机结合实现。ZooKeeper 提供了基础的通知机制，Kafka Controller 通过监听这些变化，并利用内部的状态机进行相应的处理，从 而实现分区创建、状态监测、故障切换、内容复制等功能。这种设计确保了 Kafka 集群的高可用性和一致性。</p>',29)],t={},l=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),o=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E7%8A%B6%E6%80%81%E7%9B%91%E6%B5%8B%E3%80%81%E6%95%85%E9%9A%9C%E5%88%87%E6%8D%A2%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86.html","title":"Kafka 集群状态监测、故障切换机制原理","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. ZooKeeper 监听机制","slug":"_1-zookeeper-监听机制","link":"#_1-zookeeper-监听机制","children":[]},{"level":3,"title":"2. Kafka 内部的状态机机制","slug":"_2-kafka-内部的状态机机制","link":"#_2-kafka-内部的状态机机制","children":[]},{"level":3,"title":"详细实现原理","slug":"详细实现原理","link":"#详细实现原理","children":[]},{"level":3,"title":"3. 监听和处理的结合","slug":"_3-监听和处理的结合","link":"#_3-监听和处理的结合","children":[]},{"level":3,"title":"具体实现示例","slug":"具体实现示例","link":"#具体实现示例","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"updatedTime":1720534160000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群状态监测、故障切换机制原理.md"}')}}]);