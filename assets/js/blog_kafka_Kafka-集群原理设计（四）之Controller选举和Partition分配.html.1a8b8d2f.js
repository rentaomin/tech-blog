"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[7726],{1208:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>l});var e=s(641);const t=[(0,e.Fv)('<h1 id="kafa集群原理设计-四-之-controller-选举和-partition-分配" tabindex="-1"><a class="header-anchor" href="#kafa集群原理设计-四-之-controller-选举和-partition-分配"><span>kafa集群原理设计（四）之 Controller 选举和 Partition 分配</span></a></h1><p>Kafka 集群中的 Controller 选举和 Partition 分配涉及 ZooKeeper 和 Kafka 两部分的协作。 ZooKeeper 负责协调和维护元数据，而 Kafka 负责具体的实现和业务逻辑。下面详细介绍启动过程 中的关键步骤，包括 ZooKeeper 如何触发 Controller 节点的创建，以及 Controller 如何实现 Partition 分配。</p><h3 id="_1-启动过程和-controller-选举" tabindex="-1"><a class="header-anchor" href="#_1-启动过程和-controller-选举"><span>1. 启动过程和 Controller 选举</span></a></h3><h4 id="zookeeper-启动" tabindex="-1"><a class="header-anchor" href="#zookeeper-启动"><span>ZooKeeper 启动</span></a></h4><p>当 ZooKeeper 启动时，每个 Kafka Broker 会连接到 ZooKeeper 并注册自身的信息。ZooKeeper 负责监控这些 Broker 的状态，并在 Controller 选举过程中起关键作用。</p><h4 id="kafka-broker-启动并注册" tabindex="-1"><a class="header-anchor" href="#kafka-broker-启动并注册"><span>Kafka Broker 启动并注册</span></a></h4><p>每个 Kafka Broker 启动时，会向 ZooKeeper 注册自身信息，并尝试创建 <code>/controller</code> 节点。</p><h3 id="_2-controller-选举" tabindex="-1"><a class="header-anchor" href="#_2-controller-选举"><span>2. Controller 选举</span></a></h3><h4 id="创建-controller-节点" tabindex="-1"><a class="header-anchor" href="#创建-controller-节点"><span>创建 <code>/controller</code> 节点</span></a></h4><p>在 Kafka 中，Controller 选举通过创建 ZooKeeper 的 <code>/controller</code> 节点实现。以下是 Kafka 源码中的关键部分：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// ControllerElection.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ControllerElection</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">  def elect<span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    val currentControllerId <span class="token operator">=</span> <span class="token function">getControllerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentControllerId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      val newControllerId <span class="token operator">=</span> <span class="token function">electController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>newControllerId <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">info</span><span class="token punctuation">(</span>s<span class="token string">&quot;Successfully elected controller $newControllerId&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        newControllerId</span>\n<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to elect controller&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token operator">-</span><span class="token number">1</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token function">info</span><span class="token punctuation">(</span>s<span class="token string">&quot;Controller already elected: $currentControllerId&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">      currentControllerId</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">private</span> def <span class="token function">electController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 创建 /controller 节点，如果成功则当前 Broker 成为 Controller</span></span>\n<span class="line">    val createResponse <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">createControllerNode</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>createResponse<span class="token punctuation">.</span>isSuccess<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">      brokerId</span>\n<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token operator">-</span><span class="token number">1</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token keyword">private</span> def <span class="token function">getControllerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 获取当前的 Controller ID</span></span>\n<span class="line">    val controllerData <span class="token operator">=</span> zooKeeperClient<span class="token punctuation">.</span><span class="token function">getController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    controllerData<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>brokerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="触发创建-controller-节点" tabindex="-1"><a class="header-anchor" href="#触发创建-controller-节点"><span>触发创建 <code>/controller</code> 节点</span></a></h4><p>每个 Kafka Broker 在启动时都会尝试创建 <code>/controller</code> 节点，成功创建的 Broker 成为 Controller。这是通过 ZooKeeper 的 <code>create</code> 接口实现的，如果节点已经存在，则创建失败。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">CreateResponse</span> <span class="token function">createControllerNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">final</span> <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">ZkController</span><span class="token punctuation">.</span>path<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> controllerInfo<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>brokerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">return</span> zkClient<span class="token punctuation">.</span><span class="token function">createPersistentNode</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token class-name">ZkVersion<span class="token punctuation">.</span>NoVersion</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-controller-如何实现-partition-分配" tabindex="-1"><a class="header-anchor" href="#_3-controller-如何实现-partition-分配"><span>3. Controller 如何实现 Partition 分配</span></a></h3><h4 id="partition-分配过程" tabindex="-1"><a class="header-anchor" href="#partition-分配过程"><span>Partition 分配过程</span></a></h4><p>一旦 Controller 选举完成，新的 Controller 会承担管理集群范围内的任务，包括 Partition 分配。 这是通过 Kafka 内部逻辑实现的，而不是在 ZooKeeper 中直接触发。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// KafkaController.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">onControllerFailover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Controller is now active&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">        partitionStateMachine<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动分区状态机</span></span>\n<span class="line">        replicaStateMachine<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 启动副本状态机</span></span>\n<span class="line">        <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token function">onNewBrokerRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 分配 Partition 的逻辑</span></span>\n<span class="line">        val partitions <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getAllPartitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val leaderIsrAndControllerEpoch <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getLeaderAndIsrForPartition</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaderIsrAndControllerEpoch<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 如果没有 Leader，选举新的 Leader</span></span>\n<span class="line">                partitionStateMachine<span class="token punctuation">.</span><span class="token function">handleStateChanges</span><span class="token punctuation">(</span></span>\n<span class="line">                    <span class="token class-name">Set</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OnlinePartition</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span>empty</span>\n<span class="line">                <span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="分区状态机" tabindex="-1"><a class="header-anchor" href="#分区状态机"><span>分区状态机</span></a></h4><p>Kafka 使用分区状态机和副本状态机来管理 Partition 和 Replica 的状态。在启动过程中，新的 Controller 会调用 <code>partitionStateMachine</code> 和 <code>replicaStateMachine</code> 来处理分区和副本 的状态变化。</p><h3 id="_4-zookeeper-和-kafka-的协作" tabindex="-1"><a class="header-anchor" href="#_4-zookeeper-和-kafka-的协作"><span>4. ZooKeeper 和 Kafka 的协作</span></a></h3><p>在 Kafka 的设计中，ZooKeeper 主要负责协调和存储元数据，而实际的业务逻辑和处理是在 Kafka 内 部实现的。具体来说：</p><ul><li><strong>ZooKeeper</strong>：存储和管理 Broker 列表、Topic 列表、Partition 信息、Controller 节点等元数据。</li><li><strong>Kafka Controller</strong>：负责具体的管理任务，包括 Partition 分配、Leader 选举等。</li></ul><h3 id="原理示例" tabindex="-1"><a class="header-anchor" href="#原理示例"><span>原理示例</span></a></h3><h4 id="启动-kafka-broker" tabindex="-1"><a class="header-anchor" href="#启动-kafka-broker"><span>启动 Kafka Broker</span></a></h4><p>每个 Kafka Broker 启动时，会尝试创建 <code>/controller</code> 节点。如果成功创建，该 Broker 成为 Controller。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    zkClient <span class="token operator">=</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">(</span>zookeeper<span class="token punctuation">.</span>connect<span class="token punctuation">,</span> zkSessionTimeoutMs<span class="token punctuation">,</span> zkConnectionTimeoutMs<span class="token punctuation">,</span> zkEnableSecureAcls<span class="token punctuation">)</span></span>\n<span class="line">    controllerElector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControllerElection</span><span class="token punctuation">(</span>zkClient<span class="token punctuation">)</span></span>\n<span class="line">    val controllerId <span class="token operator">=</span> controllerElector<span class="token punctuation">.</span><span class="token function">elect</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>controllerId <span class="token operator">==</span> config<span class="token punctuation">.</span>brokerId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 当前 Broker 成为 Controller</span></span>\n<span class="line">        <span class="token function">onControllerFailover</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="controller-分配-partition" tabindex="-1"><a class="header-anchor" href="#controller-分配-partition"><span>Controller 分配 Partition</span></a></h4><p>新选举的 Controller 负责分配 Partition 的 Leader 和 Follower，并更新 ZooKeeper 中的元数据。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onControllerFailover</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    partitionStateMachine<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启动分区状态机</span></span>\n<span class="line">    replicaStateMachine<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 启动副本状态机</span></span>\n<span class="line">    <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 处理分区修改</span></span>\n<span class="line">    <span class="token function">onNewBrokerRegistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">// 处理新的 Broker 注册</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Kafka 集群在启动过程中，通过 ZooKeeper 协调各个 Broker 的工作。ZooKeeper 负责选举 Controller， 成功创建 <code>/controller</code> 节点的 Broker 成为 Controller。Controller 负责管理集群范围内的任务，包 括 Partition 分配和 Leader 选举。这些操作主要通过 Kafka 内部的逻辑实现，而不是直接在 ZooKeeper 中触发。理解这些原理和实现细节，有助于架构师更好地设计和维护 Kafka 系统。</p>',32)],p={},o=(0,s(6262).A)(p,[["render",function(n,a){return(0,e.uX)(),(0,e.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BController%E9%80%89%E4%B8%BE%E5%92%8CPartition%E5%88%86%E9%85%8D.html","title":"kafa集群原理设计（四）之 Controller 选举和 Partition 分配","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. 启动过程和 Controller 选举","slug":"_1-启动过程和-controller-选举","link":"#_1-启动过程和-controller-选举","children":[]},{"level":3,"title":"2. Controller 选举","slug":"_2-controller-选举","link":"#_2-controller-选举","children":[]},{"level":3,"title":"3. Controller 如何实现 Partition 分配","slug":"_3-controller-如何实现-partition-分配","link":"#_3-controller-如何实现-partition-分配","children":[]},{"level":3,"title":"4. ZooKeeper 和 Kafka 的协作","slug":"_4-zookeeper-和-kafka-的协作","link":"#_4-zookeeper-和-kafka-的协作","children":[]},{"level":3,"title":"原理示例","slug":"原理示例","link":"#原理示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720534160000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群原理设计（四）之Controller选举和Partition分配.md"}')}}]);