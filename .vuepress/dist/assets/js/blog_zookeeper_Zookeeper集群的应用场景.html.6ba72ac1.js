"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[8727],{1439:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>p,data:()=>t});var e=a(641);const l=[(0,e.Fv)('<h1 id="zookeeper-集群的应用场景" tabindex="-1"><a class="header-anchor" href="#zookeeper-集群的应用场景"><span>Zookeeper 集群的应用场景</span></a></h1><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1><p>Zookeeper 是一个分布式协调服务，主要用于管理分布式应用中的配置、同步和命名等任务。由于其高可用性、 一致性和可靠性，Zookeeper 被广泛应用于各种分布式系统中。以下是 Zookeeper 集群的一些典型应用场景：</p><h3 id="_1-配置管理" tabindex="-1"><a class="header-anchor" href="#_1-配置管理"><span>1. 配置管理</span></a></h3><p>Zookeeper 可以用来集中存储和管理分布式应用的配置参数。各个节点在启动时从 Zookeeper 获取配置数据，并在 运行期间监控配置的变化。</p><p><strong>应用示例</strong>：</p><ul><li>微服务架构中的配置中心，集中管理各个微服务的配置信息。</li><li>分布式数据库的配置管理，确保各节点使用一致的配置。</li></ul><h3 id="_2-服务发现" tabindex="-1"><a class="header-anchor" href="#_2-服务发现"><span>2. 服务发现</span></a></h3><p>在分布式系统中，服务实例的数量和地址可能动态变化。Zookeeper 可以用来注册和发现服务，保证服务消费者能够找 到可用的服务实例。</p><p><strong>应用示例</strong>：</p><ul><li>微服务架构中的服务注册与发现，自动将新上线的服务实例注册到 Zookeeper 中，并通知服务消费者。</li><li>分布式系统中的负载均衡，通过 Zookeeper 动态更新服务实例列表，实现客户端的负载均衡。</li></ul><h3 id="_3-分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-分布式锁"><span>3. 分布式锁</span></a></h3><p>Zookeeper 提供了一种简单的机制来实现分布式锁。通过在 Zookeeper 中创建临时顺序节点，可以确保只有一个客 户端获取到锁，从而保证资源的互斥访问。</p><p><strong>应用示例</strong>：</p><ul><li>分布式任务调度，确保同一任务在同一时间只由一个节点执行。</li><li>分布式缓存一致性，确保缓存更新操作的互斥。</li></ul><h3 id="_4-集群管理" tabindex="-1"><a class="header-anchor" href="#_4-集群管理"><span>4. 集群管理</span></a></h3><p>Zookeeper 可以用来管理集群中的节点状态信息，监控节点的加入、退出和故障情况，确保集群的高可用性和稳定性。</p><p><strong>应用示例</strong>：</p><ul><li>Hadoop 和 HBase 集群管理，使用 Zookeeper 来协调节点的状态和任务分配。</li><li>Kafka 集群管理，使用 Zookeeper 来管理 Broker 的状态、主题分区元数据和消费者组的协调。</li></ul><h3 id="_5-命名服务" tabindex="-1"><a class="header-anchor" href="#_5-命名服务"><span>5. 命名服务</span></a></h3><p>Zookeeper 可以用来实现分布式系统中的命名服务，为分布式资源提供统一的命名空间，简化资源的查找和访问。</p><p><strong>应用示例</strong>：</p><ul><li>分布式文件系统中的命名服务，提供文件路径与实际存储位置的映射。</li><li>分布式计算系统中的任务命名服务，提供任务 ID 与任务实例的映射。</li></ul><h3 id="_6-队列管理" tabindex="-1"><a class="header-anchor" href="#_6-队列管理"><span>6. 队列管理</span></a></h3><p>Zookeeper 可以用来实现分布式系统中的队列，支持 FIFO（先进先出）顺序访问。</p><p><strong>应用示例</strong>：</p><ul><li>分布式任务队列，确保任务按照提交的顺序执行。</li><li>分布式消息队列，提供可靠的消息传递机制。</li></ul><h3 id="_7-数据发布-订阅" tabindex="-1"><a class="header-anchor" href="#_7-数据发布-订阅"><span>7. 数据发布/订阅</span></a></h3><p>Zookeeper 可以用来实现数据的发布/订阅模式，节点可以订阅某个数据节点的变化，当数据发生变化时，订阅者会收 到通知。</p><p><strong>应用示例</strong>：</p><ul><li>配置中心的实时配置更新，确保配置的变化能及时通知到所有订阅者。</li><li>分布式缓存的变更通知，确保缓存更新能及时同步到所有节点。</li></ul><h3 id="具体应用示例" tabindex="-1"><a class="header-anchor" href="#具体应用示例"><span>具体应用示例</span></a></h3><h4 id="_1-hadoop-集群管理" tabindex="-1"><a class="header-anchor" href="#_1-hadoop-集群管理"><span>1. Hadoop 集群管理</span></a></h4><p>Hadoop 使用 Zookeeper 来管理集群的 NameNode 和 DataNode 之间的通信和协调。Zookeeper 确保在 NameNode 故 障时，能够迅速选举出一个新的 NameNode，保持集群的高可用性。</p><h4 id="_2-kafka-集群管理" tabindex="-1"><a class="header-anchor" href="#_2-kafka-集群管理"><span>2. Kafka 集群管理</span></a></h4><p>Kafka 使用 Zookeeper 来管理 Broker 的状态、主题分区的元数据和消费者组的协调。Zookeeper 通过监控 Broker 的 加入和退出，确保 Kafka 集群的高可用性和负载均衡。</p><h4 id="_3-微服务架构中的服务注册与发现" tabindex="-1"><a class="header-anchor" href="#_3-微服务架构中的服务注册与发现"><span>3. 微服务架构中的服务注册与发现</span></a></h4><p>在微服务架构中，每个服务实例启动时会将自己的信息注册到 Zookeeper 中。服务消费者可以从 Zookeeper 获取可用服务 实例列表，实现动态的服务发现和负载均衡。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>Zookeeper 在分布式系统中扮演着至关重要的角色，提供了强一致性、高可用性的分布式协调服务。通过在配置管理、服务 发现、分布式锁、集群管理、命名服务、队列管理和数据发布/订阅等方面的应用，Zookeeper 为构建可靠的分布式系统提 供了有力支持。</p><h3 id="配置操作示例" tabindex="-1"><a class="header-anchor" href="#配置操作示例"><span>配置操作示例</span></a></h3><p>以下是 Zookeeper 在典型应用场景中的配置和安装操作示例，以帮助理解如何在具体场景中使用 Zookeeper。我们将介绍 Zookeeper 的安装、配置和在几个应用场景中的具体用法。</p><h3 id="_1-zookeeper-安装和配置" tabindex="-1"><a class="header-anchor" href="#_1-zookeeper-安装和配置"><span>1. Zookeeper 安装和配置</span></a></h3><h4 id="安装-zookeeper" tabindex="-1"><a class="header-anchor" href="#安装-zookeeper"><span>安装 Zookeeper</span></a></h4><ol><li><p><strong>下载 Zookeeper</strong>： 从 Zookeeper 官方网站下载稳定版本的 Zookeeper，例如 <code>zookeeper-3.8.0</code>。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> https://downloads.apache.org/zookeeper/zookeeper-3.8.0/apache-zookeeper-3.8.0-bin.tar.gz</span>\n<span class="line"><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> apache-zookeeper-3.8.0-bin.tar.gz</span>\n<span class="line"><span class="token builtin class-name">cd</span> apache-zookeeper-3.8.0-bin</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>配置 Zookeeper</strong>： 在 <code>conf</code> 目录下创建一个名为 <code>zoo.cfg</code> 的配置文件，并添加以下内容：</p><div class="language-cfg line-numbers-mode" data-highlighter="prismjs" data-ext="cfg" data-title="cfg"><pre class="language-cfg"><code><span class="line">tickTime=2000</span>\n<span class="line">dataDir=/var/zookeeper</span>\n<span class="line">clientPort=2181</span>\n<span class="line">initLimit=5</span>\n<span class="line">syncLimit=2</span>\n<span class="line">server.1=localhost:2888:3888</span>\n<span class="line">server.2=localhost:2889:3889</span>\n<span class="line">server.3=localhost:2890:3890</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>tickTime</code>：心跳时间间隔，单位为毫秒。</li><li><code>dataDir</code>：存储快照的目录。</li><li><code>clientPort</code>：客户端连接的端口。</li><li><code>initLimit</code> 和 <code>syncLimit</code>：用于设置 Zookeeper 集群内部节点之间的通信超时。</li><li><code>server.X</code>：配置 Zookeeper 集群节点的信息，格式为 <code>server.X=主机名:选举端口:同步端口</code>。</li></ul></li><li><p><strong>启动 Zookeeper</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkServer.sh start</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h4 id="配置环境变量" tabindex="-1"><a class="header-anchor" href="#配置环境变量"><span>配置环境变量</span></a></h4><p>在启动 Zookeeper 之前，确保已经配置了 Java 环境变量。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/path/to/java</span>\n<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置管理" tabindex="-1"><a class="header-anchor" href="#_2-配置管理"><span>2. 配置管理</span></a></h3><p>Zookeeper 用于集中管理分布式应用的配置参数。</p><p><strong>操作步骤</strong>：</p><ol><li><p><strong>创建一个配置节点</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> localhost:2181</span>\n<span class="line">create /config <span class="token string">&quot;&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>添加配置参数</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">create /config/db_url <span class="token string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span></span>\n<span class="line">create /config/db_user <span class="token string">&quot;root&quot;</span></span>\n<span class="line">create /config/db_password <span class="token string">&quot;password&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>读取配置参数</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">get /config/db_url</span>\n<span class="line">get /config/db_user</span>\n<span class="line">get /config/db_password</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>修改配置参数</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">set</span> /config/db_password <span class="token string">&quot;new_password&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="_3-服务发现" tabindex="-1"><a class="header-anchor" href="#_3-服务发现"><span>3. 服务发现</span></a></h3><p>Zookeeper 用于服务注册和发现，确保服务消费者能够找到可用的服务实例。</p><p><strong>操作步骤</strong>：</p><ol><li><p><strong>注册服务</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> localhost:2181</span>\n<span class="line">create /services <span class="token string">&quot;&quot;</span></span>\n<span class="line">create /services/service1 <span class="token string">&quot;&quot;</span></span>\n<span class="line">create /services/service1/instance1 <span class="token string">&quot;192.168.1.100:8080&quot;</span></span>\n<span class="line">create /services/service1/instance2 <span class="token string">&quot;192.168.1.101:8080&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>发现服务</strong>：</p><p>客户端可以通过监听 <code>/services/service1</code> 节点来发现服务实例的变化。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">get /services/service1</span>\n<span class="line"><span class="token function">ls</span> /services/service1</span>\n<span class="line">get /services/service1/instance1</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-分布式锁" tabindex="-1"><a class="header-anchor" href="#_4-分布式锁"><span>4. 分布式锁</span></a></h3><p>使用 Zookeeper 实现分布式锁，确保资源的互斥访问。</p><p><strong>操作步骤</strong>：</p><ol><li><p><strong>创建锁节点</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> localhost:2181</span>\n<span class="line">create /locks <span class="token string">&quot;&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>加锁</strong>：</p><p>客户端在 <code>/locks</code> 目录下创建一个临时顺序节点，并检查自己是否是最小的节点。如果是，则获得锁，否则等待。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token class-name">String</span> lockPath <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;/locks/lock_&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">.</span><span class="token constant">OPEN_ACL_UNSAFE</span><span class="token punctuation">,</span> </span>\n<span class="line"><span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">EPHEMERAL_SEQUENTIAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">&quot;/locks&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>lockPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 获得锁</span></span>\n<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 等待锁释放</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>释放锁</strong>：</p><p>客户端删除自己创建的临时顺序节点，释放锁。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line">zk<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockPath<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="_5-集群管理" tabindex="-1"><a class="header-anchor" href="#_5-集群管理"><span>5. 集群管理</span></a></h3><p>使用 Zookeeper 管理集群中的节点状态，监控节点的加入、退出和故障情况。</p><p><strong>操作步骤</strong>：</p><ol><li><p><strong>注册节点</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> localhost:2181</span>\n<span class="line">create /nodes <span class="token string">&quot;&quot;</span></span>\n<span class="line">create /nodes/node1 <span class="token string">&quot;192.168.1.100&quot;</span></span>\n<span class="line">create /nodes/node2 <span class="token string">&quot;192.168.1.101&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>监控节点</strong>：</p><p>客户端可以通过监听 <code>/nodes</code> 节点来监控节点的加入和退出。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">get /nodes</span>\n<span class="line"><span class="token function">ls</span> /nodes</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>节点故障检测</strong>：</p><p>通过心跳机制检测节点故障，故障节点会自动从 <code>/nodes</code> 节点中删除。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line">zk<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">&quot;/nodes/node1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token annotation punctuation">@Override</span></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Event<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>NodeDeleted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// 节点故障</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_6-数据发布-订阅" tabindex="-1"><a class="header-anchor" href="#_6-数据发布-订阅"><span>6. 数据发布/订阅</span></a></h3><p>使用 Zookeeper 实现数据的发布/订阅模式，订阅者可以监听数据节点的变化。</p><p><strong>操作步骤</strong>：</p><ol><li><p><strong>创建数据节点</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/zkCli.sh <span class="token parameter variable">-server</span> localhost:2181</span>\n<span class="line">create /data_node <span class="token string">&quot;initial_data&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>订阅数据节点的变化</strong>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line">zk<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&quot;/data_node&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token annotation punctuation">@Override</span></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">WatchedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Event<span class="token punctuation">.</span>EventType<span class="token punctuation">.</span>NodeDataChanged</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// 数据节点发生变化</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>发布数据变化</strong>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token builtin class-name">set</span> /data_node <span class="token string">&quot;updated_data&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h3 id="结论-1" tabindex="-1"><a class="header-anchor" href="#结论-1"><span>结论</span></a></h3><p>通过上述安装和配置示例，可以看到 Zookeeper 在配置管理、服务发现、分布式锁、集群管理和数据发布/订阅等应用 场景中的具体使用方法。Zookeeper 通过其强一致性和高可用性，提供了可靠的分布式协调服务，是构建分布式系统的 有力工具。</p>',70)],i={},p=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),t=JSON.parse('{"path":"/blog/zookeeper/Zookeeper%E9%9B%86%E7%BE%A4%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html","title":"Zookeeper 集群的应用场景","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Zookeeper"],"tag":["分布式管理"],"sticky":true,"excerpt":"<p> Zookeeper 客户端命令操作 </p>"},"headers":[{"level":3,"title":"1. 配置管理","slug":"_1-配置管理","link":"#_1-配置管理","children":[]},{"level":3,"title":"2. 服务发现","slug":"_2-服务发现","link":"#_2-服务发现","children":[]},{"level":3,"title":"3. 分布式锁","slug":"_3-分布式锁","link":"#_3-分布式锁","children":[]},{"level":3,"title":"4. 集群管理","slug":"_4-集群管理","link":"#_4-集群管理","children":[]},{"level":3,"title":"5. 命名服务","slug":"_5-命名服务","link":"#_5-命名服务","children":[]},{"level":3,"title":"6. 队列管理","slug":"_6-队列管理","link":"#_6-队列管理","children":[]},{"level":3,"title":"7. 数据发布/订阅","slug":"_7-数据发布-订阅","link":"#_7-数据发布-订阅","children":[]},{"level":3,"title":"具体应用示例","slug":"具体应用示例","link":"#具体应用示例","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]},{"level":3,"title":"配置操作示例","slug":"配置操作示例","link":"#配置操作示例","children":[]},{"level":3,"title":"1. Zookeeper 安装和配置","slug":"_1-zookeeper-安装和配置","link":"#_1-zookeeper-安装和配置","children":[]},{"level":3,"title":"2. 配置管理","slug":"_2-配置管理","link":"#_2-配置管理","children":[]},{"level":3,"title":"3. 服务发现","slug":"_3-服务发现","link":"#_3-服务发现","children":[]},{"level":3,"title":"4. 分布式锁","slug":"_4-分布式锁","link":"#_4-分布式锁","children":[]},{"level":3,"title":"5. 集群管理","slug":"_5-集群管理","link":"#_5-集群管理","children":[]},{"level":3,"title":"6. 数据发布/订阅","slug":"_6-数据发布-订阅","link":"#_6-数据发布-订阅","children":[]},{"level":3,"title":"结论","slug":"结论-1","link":"#结论-1","children":[]}],"git":{"updatedTime":1720877624000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/zookeeper/Zookeeper集群的应用场景.md"}')}}]);