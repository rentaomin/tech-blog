"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[749],{4977:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>c});var p=a(641);const e=[(0,p.Fv)('<h1 id="minio-集群数据分片如何确认完整性和一致性" tabindex="-1"><a class="header-anchor" href="#minio-集群数据分片如何确认完整性和一致性"><span>Minio 集群数据分片如何确认完整性和一致性？</span></a></h1><p>在 MinIO 集群中，数据分片在多个节点上存储时，需要一个确认消息机制来确保数据的完整性和一致性。 这个机制包括以下几个关键步骤：</p><ol><li><p><strong>数据分片和写入</strong>：</p><ul><li>当客户端上传一个文件时，文件会被分成多个分片。每个分片进一步分割成数据块和冗余块，并分布到 不同的存储节点上。</li></ul></li><li><p><strong>数据写入确认</strong>：</p><ul><li>每个节点在成功写入一个数据块或冗余块后，会发送一个确认消息（ACK）给主控节点或协调器。</li></ul></li><li><p><strong>主控节点或协调器的角色</strong>：</p><ul><li>主控节点或协调器负责收集所有节点的确认消息，并进行处理和决策。例如，只有当所有需要的确认消息都 收到时，才认为数据写入成功。</li></ul></li><li><p><strong>错误处理和重试</strong>：</p><ul><li>如果某个节点未能在指定时间内发送确认消息，主控节点会触发错误处理机制，包括重试写入或将该数据块重 新分配到其他节点。</li></ul></li></ol><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h3><p>以下是一个典型的实现原理，展示了如何在 MinIO 集群中实现数据分片的多节点存储和确认消息机制：</p><h4 id="_1-数据分片和写入" tabindex="-1"><a class="header-anchor" href="#_1-数据分片和写入"><span>1. 数据分片和写入</span></a></h4><p>当客户端上传一个文件时，文件被分成多个分片。每个分片通过 Erasure Coding（纠删码）进一步分成数据块和冗余 块，并分布到多个存储节点上。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioDataShardWriter</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DATA_BLOCKS</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">PARITY_BLOCKS</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeData</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Erasure coding</span></span>\n<span class="line">        <span class="token class-name">ErasureEncoder</span> encoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErasureEncoder</span><span class="token punctuation">(</span><span class="token constant">DATA_BLOCKS</span><span class="token punctuation">,</span> <span class="token constant">PARITY_BLOCKS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blocks <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Distribute blocks to different nodes</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> blocks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">String</span> node <span class="token operator">=</span> <span class="token function">getNodeForBlock</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token function">sendDataToNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> objectKey<span class="token punctuation">,</span> blocks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getNodeForBlock</span><span class="token punctuation">(</span><span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Determine the node for the block based on the block index</span></span>\n<span class="line">        <span class="token comment">// For simplicity, assume a static mapping</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;http://minio-node-&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>blockIndex <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:9000&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendDataToNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> node<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> block<span class="token punctuation">,</span> </span>\n<span class="line">        <span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Send data to the node</span></span>\n<span class="line">        <span class="token comment">// Here you can use HTTP client or MinIO SDK to send data</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-数据写入确认" tabindex="-1"><a class="header-anchor" href="#_2-数据写入确认"><span>2. 数据写入确认</span></a></h4><p>每个节点在成功写入一个数据块或冗余块后，会发送一个确认消息（ACK）给主控节点或协调器。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioDataShardWriter</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token comment">// Previous methods...</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendDataToNode</span><span class="token punctuation">(</span><span class="token class-name">String</span> node<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> block<span class="token punctuation">,</span> </span>\n<span class="line">        <span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Send data to the node</span></span>\n<span class="line">        <span class="token comment">// Here you can use HTTP client or MinIO SDK to send data</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token comment">// Simulate sending ACK after successful write</span></span>\n<span class="line">        <span class="token function">sendAckToCoordinator</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> objectKey<span class="token punctuation">,</span> blockIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendAckToCoordinator</span><span class="token punctuation">(</span><span class="token class-name">String</span> node<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> </span>\n<span class="line">        <span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Send ACK to coordinator indicating successful write</span></span>\n<span class="line">        <span class="token comment">// This could be a REST API call or message queue</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-主控节点或协调器" tabindex="-1"><a class="header-anchor" href="#_3-主控节点或协调器"><span>3. 主控节点或协调器</span></a></h4><p>主控节点或协调器负责收集所有节点的确认消息，并进行处理和决策。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coordinator</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> receivedAcks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">receiveAck</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> <span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token class-name">String</span> key <span class="token operator">=</span> bucketName <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> objectKey<span class="token punctuation">;</span></span>\n<span class="line">        receivedAcks<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        receivedAcks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>blockIndex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>receivedAcks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// Assuming 8 data blocks + 4 parity blocks</span></span>\n<span class="line">            <span class="token function">completeWrite</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">completeWrite</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Mark the write as complete</span></span>\n<span class="line">        <span class="token comment">// This could involve updating metadata, notifying client, etc.</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleWriteError</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectKey<span class="token punctuation">,</span> <span class="token keyword">int</span> blockIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// Handle write error, e.g., by retrying or reallocating the block</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据完整性检查" tabindex="-1"><a class="header-anchor" href="#数据完整性检查"><span>数据完整性检查</span></a></h3><p>数据完整性检查主要通过以下几个方面进行：</p><ol><li><p><strong>ETag 校验</strong>： 每个分片在上传完成后，服务器计算该分片的 ETag（实体标签），通常是该分片内容的 MD5 哈希值。客户端在完 成上传时，提交所有分片的 ETag 列表，服务器进行校验，确保分片数据的完整性。</p></li><li><p><strong>校验和机制</strong>： 在数据传输过程中，可以使用 CRC（循环冗余校验）等校验和机制来确保数据未被篡改或损坏。</p></li><li><p><strong>纠删码恢复</strong>： 如果某个节点上的数据块损坏或丢失，MinIO 可以通过纠删码技术，从其他节点上的数据块和冗余块中恢复数据。</p></li></ol><h3 id="详细流程图" tabindex="-1"><a class="header-anchor" href="#详细流程图"><span>详细流程图</span></a></h3><ol><li><p><strong>客户端分片上传</strong>：</p><ul><li>客户端将文件分片，通过并行请求将分片发送到不同的节点。</li><li>每个节点接收分片并进行数据块和冗余块的存储。</li></ul></li><li><p><strong>节点确认消息</strong>：</p><ul><li>每个节点在成功写入数据块后，发送确认消息（ACK）到主控节点。</li><li>主控节点收集所有节点的确认消息，进行完整性校验。</li></ul></li><li><p><strong>数据完整性检查</strong>：</p><ul><li>主控节点在收到所有确认消息后，进行数据块的完整性校验。</li><li>如果发现数据块损坏或丢失，触发纠删码恢复机制，从其他节点恢复数据。</li></ul></li><li><p><strong>客户端通知</strong>：</p><ul><li>主控节点在确认所有数据块写入成功并通过完整性校验后，通知客户端上传完成。</li></ul></li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>MinIO 集群通过分片上传、多节点并行接收数据块、纠删码存储和节点确认消息机制，确保数据在多个节点上的冗余 存储和完整性。主控节点或协调器在接收到所有节点的确认消息后，进行数据完整性检查，并在数据完整且冗余块存储 成功后通知客户端上传完成。通过这种机制，MinIO 实现了高效、可靠的超大文件上传和数据存储。</p>',21)],t={},l=(0,a(6262).A)(t,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/blog/minio/Minio-%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%A6%82%E4%BD%95%E7%A1%AE%E8%AE%A4%E5%AE%8C%E6%95%B4%E6%80%A7%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7.html","title":"Minio 集群数据分片如何确认完整性和一致性？","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"实现原理","slug":"实现原理","link":"#实现原理","children":[]},{"level":3,"title":"数据完整性检查","slug":"数据完整性检查","link":"#数据完整性检查","children":[]},{"level":3,"title":"详细流程图","slug":"详细流程图","link":"#详细流程图","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-集群数据分片如何确认完整性和一致性.md"}')}}]);