"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[7780],{5410:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>c});var p=a(641);const e=[(0,p.Fv)('<h1 id="kafka-管理节点-controller-角色分析" tabindex="-1"><a class="header-anchor" href="#kafka-管理节点-controller-角色分析"><span>kafka 管理节点 Controller 角色分析</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kafka controller 如何管理分区的创建、状态监测、故障切换、内容复制、如何管控分区副本的状态检测故障切换、数据同步、learder 选举？</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Kafka Controller 是 Kafka 集群中的一个关键组件，负责管理分区的创建、状态监测、故障切换、内容 复制等任务。它通过 ZooKeeper 协调和管理这些任务，确保 Kafka 集群的高可用性和一致性。以下是 Kafka Controller 管理分区和副本的详细实现原理和示例代码：</p><h3 id="_1-管理分区的创建" tabindex="-1"><a class="header-anchor" href="#_1-管理分区的创建"><span>1. 管理分区的创建</span></a></h3><p>当创建一个新的 Topic 时，Kafka Controller 会负责分区和副本的分配。</p><h4 id="创建-topic-示例" tabindex="-1"><a class="header-anchor" href="#创建-topic-示例"><span>创建 Topic 示例</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建 Topic &quot;my_topic&quot;，有 3 个分区和 3 个副本</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> my_topic --bootstrap-server localhost:9092 <span class="token parameter variable">--partitions</span> <span class="token number">3</span> --replication-factor <span class="token number">3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="controller-处理分区创建的核心代码" tabindex="-1"><a class="header-anchor" href="#controller-处理分区创建的核心代码"><span>Controller 处理分区创建的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// KafkaController.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        val partitions <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getAllPartitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val leaderIsrAndControllerEpoch <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getLeaderAndIsrForPartition</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaderIsrAndControllerEpoch<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 如果没有 Leader，选举新的 Leader</span></span>\n<span class="line">                partitionStateMachine<span class="token punctuation">.</span><span class="token function">handleStateChanges</span><span class="token punctuation">(</span></span>\n<span class="line">                    <span class="token class-name">Set</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OnlinePartition</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span>empty</span>\n<span class="line">                <span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-分区状态监测" tabindex="-1"><a class="header-anchor" href="#_2-分区状态监测"><span>2. 分区状态监测</span></a></h3><p>Kafka Controller 通过 ZooKeeper 监控分区的状态，包括分区的 Leader 和 ISR 列表的变化。</p><h4 id="分区状态监测的核心代码" tabindex="-1"><a class="header-anchor" href="#分区状态监测的核心代码"><span>分区状态监测的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PartitionStateMachine</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token class-name">KafkaController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">handleStateChanges</span><span class="token punctuation">(</span>partitions<span class="token operator">:</span> <span class="token class-name">Set</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetState<span class="token operator">:</span> <span class="token class-name">PartitionState</span><span class="token punctuation">,</span> assignments<span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val currentState <span class="token operator">=</span> controllerContext<span class="token punctuation">.</span><span class="token function">partitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            targetState match <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OnlinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为在线状态</span></span>\n<span class="line">                    <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token function">assignments</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OfflinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为离线状态</span></span>\n<span class="line">                    <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> assignedReplicas<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 选举 Leader 并更新 ISR 列表</span></span>\n<span class="line">        val leader <span class="token operator">=</span> assignedReplicas<span class="token punctuation">.</span>head</span>\n<span class="line">        val isr <span class="token operator">=</span> assignedReplicas</span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putPartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 将分区设置为 Follower 状态</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">removePartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">deleteLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-故障切换和内容复制" tabindex="-1"><a class="header-anchor" href="#_3-故障切换和内容复制"><span>3. 故障切换和内容复制</span></a></h3><p>当分区的 Leader 发生故障时，Kafka Controller 负责故障切换，并确保内容复制的正确性。</p><h4 id="故障切换的核心代码" tabindex="-1"><a class="header-anchor" href="#故障切换的核心代码"><span>故障切换的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        val partitions <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getAllPartitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val leaderIsrAndControllerEpoch <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getLeaderAndIsrForPartition</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaderIsrAndControllerEpoch<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 如果没有 Leader，选举新的 Leader</span></span>\n<span class="line">                partitionStateMachine<span class="token punctuation">.</span><span class="token function">handleStateChanges</span><span class="token punctuation">(</span></span>\n<span class="line">                    <span class="token class-name">Set</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OnlinePartition</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span>empty</span>\n<span class="line">                <span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-分区副本的状态检测" tabindex="-1"><a class="header-anchor" href="#_4-分区副本的状态检测"><span>4. 分区副本的状态检测</span></a></h3><p>Kafka Controller 通过 ZooKeeper 监控分区副本的状态，包括副本的同步状态和副本的健康状况。</p><h4 id="分区副本状态检测的核心代码" tabindex="-1"><a class="header-anchor" href="#分区副本状态检测的核心代码"><span>分区副本状态检测的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ReplicaStateMachine</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token class-name">KafkaController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">handleStateChanges</span><span class="token punctuation">(</span>replicas<span class="token operator">:</span> <span class="token class-name">Set</span><span class="token punctuation">[</span><span class="token class-name">Replica</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetState<span class="token operator">:</span> <span class="token class-name">ReplicaState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        replicas<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> replica <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            targetState match <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OnlineReplica</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将副本设置为在线状态</span></span>\n<span class="line">                    <span class="token function">makeOnline</span><span class="token punctuation">(</span>replica<span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OfflineReplica</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将副本设置为离线状态</span></span>\n<span class="line">                    <span class="token function">makeOffline</span><span class="token punctuation">(</span>replica<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeOnline</span><span class="token punctuation">(</span>replica<span class="token operator">:</span> <span class="token class-name">Replica</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 更新副本状态为在线</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putReplicaState</span><span class="token punctuation">(</span>replica<span class="token punctuation">,</span> <span class="token class-name">OnlineReplica</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateReplicaState</span><span class="token punctuation">(</span>replica<span class="token punctuation">,</span> <span class="token class-name">OnlineReplica</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeOffline</span><span class="token punctuation">(</span>replica<span class="token operator">:</span> <span class="token class-name">Replica</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 更新副本状态为离线</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putReplicaState</span><span class="token punctuation">(</span>replica<span class="token punctuation">,</span> <span class="token class-name">OfflineReplica</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateReplicaState</span><span class="token punctuation">(</span>replica<span class="token punctuation">,</span> <span class="token class-name">OfflineReplica</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-故障切换和数据同步" tabindex="-1"><a class="header-anchor" href="#_5-故障切换和数据同步"><span>5. 故障切换和数据同步</span></a></h3><p>当副本发生故障时，Kafka Controller 负责故障切换，并确保数据同步的正确性。</p><h4 id="故障切换和数据同步的核心代码" tabindex="-1"><a class="header-anchor" href="#故障切换和数据同步的核心代码"><span>故障切换和数据同步的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">onReplicaModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        val replicas <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getAllReplicas</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        replicas<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> replica <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val replicaState <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getReplicaState</span><span class="token punctuation">(</span>replica<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>replicaState <span class="token operator">==</span> <span class="token class-name">OfflineReplica</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 如果副本离线，尝试重新上线</span></span>\n<span class="line">                replicaStateMachine<span class="token punctuation">.</span><span class="token function">handleStateChanges</span><span class="token punctuation">(</span></span>\n<span class="line">                    <span class="token class-name">Set</span><span class="token punctuation">(</span>replica<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OnlineReplica</span></span>\n<span class="line">                <span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-leader-选举" tabindex="-1"><a class="header-anchor" href="#_6-leader-选举"><span>6. Leader 选举</span></a></h3><p>当分区的 Leader 发生故障时，Kafka Controller 从 ISR 列表中选举新的 Leader，并更新 ZooKeeper 中的元数据。</p><h4 id="leader-选举的核心代码" tabindex="-1"><a class="header-anchor" href="#leader-选举的核心代码"><span>Leader 选举的核心代码</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PartitionStateMachine</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token class-name">KafkaController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">handleStateChanges</span><span class="token punctuation">(</span>partitions<span class="token operator">:</span> <span class="token class-name">Set</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetState<span class="token operator">:</span> <span class="token class-name">PartitionState</span><span class="token punctuation">,</span> assignments<span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val currentState <span class="token operator">=</span> controllerContext<span class="token punctuation">.</span><span class="token function">partitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            targetState match <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OnlinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为在线状态</span></span>\n<span class="line">                    <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token function">assignments</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OfflinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为离线状态</span></span>\n<span class="line">                    <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> assignedReplicas<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 选举 Leader 并更新 ISR 列表</span></span>\n<span class="line">        val leader <span class="token operator">=</span> assignedReplicas<span class="token punctuation">.</span>head</span>\n<span class="line">        val isr <span class="token operator">=</span> assignedReplicas</span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putPartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 将分区设置为 Follower 状态</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">removePartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">deleteLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Kafka Controller 通过 ZooKeeper 管理分区的创建、状态监测、故障切换和内容复制。它通过分区和副本 状态机来管理分区和副本的状态变化，并在发生故障时进行切换和数据同步。ZooKeeper 提供了必要的协调和 存储机制，确保 Kafka 集群的一致性和高可用性。理解这些实现原理和核心代码，有助于架构师更好地设计和 维护 Kafka 系统。</p>',31)],t={},l=(0,a(6262).A)(t,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,e)}]]),c=JSON.parse('{"path":"/blog/kafka/Kafka-%E7%AE%A1%E7%90%86%E8%8A%82%E7%82%B9Controller%E8%AE%BE%E8%AE%A1%E5%88%86%E6%9E%90.html","title":"kafka 管理节点 Controller 角色分析","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. 管理分区的创建","slug":"_1-管理分区的创建","link":"#_1-管理分区的创建","children":[]},{"level":3,"title":"2. 分区状态监测","slug":"_2-分区状态监测","link":"#_2-分区状态监测","children":[]},{"level":3,"title":"3. 故障切换和内容复制","slug":"_3-故障切换和内容复制","link":"#_3-故障切换和内容复制","children":[]},{"level":3,"title":"4. 分区副本的状态检测","slug":"_4-分区副本的状态检测","link":"#_4-分区副本的状态检测","children":[]},{"level":3,"title":"5. 故障切换和数据同步","slug":"_5-故障切换和数据同步","link":"#_5-故障切换和数据同步","children":[]},{"level":3,"title":"6. Leader 选举","slug":"_6-leader-选举","link":"#_6-leader-选举","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-管理节点Controller设计分析.md"}')}}]);