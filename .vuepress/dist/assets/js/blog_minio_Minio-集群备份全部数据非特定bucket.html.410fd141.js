"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[8926],{3317:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>t,data:()=>p});var e=a(641);const l=[(0,e.Fv)('<h1 id="minio-集群备份全部数据非特定-bucket" tabindex="-1"><a class="header-anchor" href="#minio-集群备份全部数据非特定-bucket"><span>Minio 集群备份全部数据非特定 bucket</span></a></h1><p>要备份整个 MinIO 集群的数据而不仅仅是某个特定的 bucket，可以采用以下几种方法：</p><h3 id="_1-使用-mc-命令行工具进行全局备份" tabindex="-1"><a class="header-anchor" href="#_1-使用-mc-命令行工具进行全局备份"><span>1. 使用 <code>mc</code> 命令行工具进行全局备份</span></a></h3><p><code>mc</code> 命令行工具可以通过 <code>mirror</code> 命令将整个 MinIO 集群的数据备份到另一个 MinIO 集群或其他存储位置。 下面是一个备份整个 MinIO 集群的示例。</p><h4 id="操作步骤" tabindex="-1"><a class="header-anchor" href="#操作步骤"><span>操作步骤</span></a></h4><ol><li><strong>安装 <code>mc</code></strong></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">wget</span> https://dl.min.io/client/mc/release/linux-amd64/mc</span>\n<span class="line"><span class="token function">chmod</span> +x <span class="token function">mc</span></span>\n<span class="line"><span class="token function">sudo</span> <span class="token function">mv</span> <span class="token function">mc</span> /usr/local/bin/</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>配置源和目标 MinIO 集群</strong></li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> sourceMinIO http://source-minio.example.com accessKey secretKey</span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> targetMinIO http://target-minio.example.com accessKey secretKey</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>镜像整个 MinIO 集群的数据</strong></li></ol><p>使用 <code>mc mirror</code> 命令将所有 bucket 及其内容从源 MinIO 集群备份到目标 MinIO 集群。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">mc</span> mirror <span class="token parameter variable">--watch</span> sourceMinIO/ targetMinIO/</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2-自动化全局备份脚本" tabindex="-1"><a class="header-anchor" href="#_2-自动化全局备份脚本"><span>2. 自动化全局备份脚本</span></a></h3><p>为了确保备份过程的自动化和定期执行，可以编写一个脚本并使用 cron 作业定期执行该脚本。</p><h4 id="示例备份脚本" tabindex="-1"><a class="header-anchor" href="#示例备份脚本"><span>示例备份脚本</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 设置源和目标 MinIO 别名</span></span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> sourceMinIO http://source-minio.example.com accessKey secretKey</span>\n<span class="line"><span class="token function">mc</span> <span class="token builtin class-name">alias</span> <span class="token builtin class-name">set</span> targetMinIO http://target-minio.example.com accessKey secretKey</span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 备份所有 bucket</span></span>\n<span class="line"><span class="token function">mc</span> mirror <span class="token parameter variable">--watch</span> sourceMinIO/ targetMinIO/</span>\n<span class="line"></span>\n<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Backup completed at <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>&quot;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置定时任务-cron-job" tabindex="-1"><a class="header-anchor" href="#配置定时任务-cron-job"><span>配置定时任务（cron job）</span></a></h4><p>使用 cron 作业定期运行备份脚本，例如，每天凌晨 2 点执行备份。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">crontab</span> <span class="token parameter variable">-e</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 添加以下行以每天凌晨 2 点运行备份脚本</span></span>\n<span class="line"><span class="token number">0</span> <span class="token number">2</span> * * * /path/to/backup_script.sh <span class="token operator">&gt;&gt;</span> /path/to/backup_log.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-跨数据中心的异地复制" tabindex="-1"><a class="header-anchor" href="#_3-跨数据中心的异地复制"><span>3. 跨数据中心的异地复制</span></a></h3><p>跨数据中心的异地复制不仅可以备份单个 bucket，也可以配置为备份整个集群的数据。这种方法可以确保 数据在多个数据中心之间实时同步。</p><h4 id="配置步骤" tabindex="-1"><a class="header-anchor" href="#配置步骤"><span>配置步骤</span></a></h4><ol><li><strong>配置异地复制策略</strong></li></ol><p>为源 MinIO 集群中的每个 bucket 配置异地复制到目标 MinIO 集群。为了简化操作，可以编写一个脚本自 动配置所有 bucket 的异地复制。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 获取所有 bucket 列表</span></span>\n<span class="line"><span class="token assign-left variable">buckets</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">mc</span> <span class="token function">ls</span> sourceMinIO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $5}&#39;</span><span class="token variable">)</span></span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 为每个 bucket 配置异地复制</span></span>\n<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">bucket</span> <span class="token keyword">in</span> <span class="token variable">$buckets</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>\n<span class="line">    <span class="token function">mc</span> replicate <span class="token function">add</span> sourceMinIO/<span class="token variable">$bucket</span> --remote-bucket <span class="token variable">$bucket</span> --remote-target targetMinIO</span>\n<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Replication configured for bucket: <span class="token variable">$bucket</span>&quot;</span></span>\n<span class="line"><span class="token keyword">done</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="运行配置脚本" tabindex="-1"><a class="header-anchor" href="#运行配置脚本"><span>运行配置脚本</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">bash</span> configure_replication.sh</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4-数据一致性和验证" tabindex="-1"><a class="header-anchor" href="#_4-数据一致性和验证"><span>4. 数据一致性和验证</span></a></h3><p>在备份和异地复制过程中，确保数据的一致性和可靠性非常重要。可以定期验证备份数据的完整性，并在灾难恢复演练中测 试数据恢复的有效性。</p><h4 id="数据一致性检查脚本" tabindex="-1"><a class="header-anchor" href="#数据一致性检查脚本"><span>数据一致性检查脚本</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 检查源和目标 MinIO 集群中的 bucket 列表是否一致</span></span>\n<span class="line"><span class="token assign-left variable">source_buckets</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">mc</span> <span class="token function">ls</span> sourceMinIO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $5}&#39;</span><span class="token variable">)</span></span></span>\n<span class="line"><span class="token assign-left variable">target_buckets</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">mc</span> <span class="token function">ls</span> targetMinIO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $5}&#39;</span><span class="token variable">)</span></span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$source_buckets</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;<span class="token variable">$target_buckets</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>\n<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Bucket lists are consistent between source and target.&quot;</span></span>\n<span class="line"><span class="token keyword">else</span></span>\n<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Bucket lists are inconsistent. Please investigate.&quot;</span></span>\n<span class="line"><span class="token keyword">fi</span></span>\n<span class="line"></span>\n<span class="line"><span class="token comment"># 检查每个 bucket 中的数据一致性</span></span>\n<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">bucket</span> <span class="token keyword">in</span> <span class="token variable">$source_buckets</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>\n<span class="line">    <span class="token assign-left variable">source_hash</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">mc</span> <span class="token function">find</span> sourceMinIO/$bucket <span class="token parameter variable">--exec</span> <span class="token string">&quot;md5sum {}&quot;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> md5sum<span class="token variable">)</span></span></span>\n<span class="line">    <span class="token assign-left variable">target_hash</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">mc</span> <span class="token function">find</span> targetMinIO/$bucket <span class="token parameter variable">--exec</span> <span class="token string">&quot;md5sum {}&quot;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> md5sum<span class="token variable">)</span></span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable">$source_hash</span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;<span class="token variable">$target_hash</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>\n<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Data in bucket <span class="token variable">$bucket</span> is consistent.&quot;</span></span>\n<span class="line">    <span class="token keyword">else</span></span>\n<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;Data in bucket <span class="token variable">$bucket</span> is inconsistent. Please investigate.&quot;</span></span>\n<span class="line">    <span class="token keyword">fi</span></span>\n<span class="line"><span class="token keyword">done</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过使用 <code>mc</code> 命令行工具或编写自动化脚本，可以实现整个 MinIO 集群的数据备份和异地复制。确保定期备份和验证数据 一致性是灾难恢复策略的重要组成部分。此外，跨数据中心的异地复制可以实现实时数据同步，进一步增强数据的可用性和容错性。</p><p>这些方法和策略可以帮助架构师有效地管理和保护 MinIO 集群中的数据，确保在发生灾难时能够迅速恢复系统并保证数据完整性。</p>',34)],i={},t=(0,a(6262).A)(i,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,l)}]]),p=JSON.parse('{"path":"/blog/minio/Minio-%E9%9B%86%E7%BE%A4%E5%A4%87%E4%BB%BD%E5%85%A8%E9%83%A8%E6%95%B0%E6%8D%AE%E9%9D%9E%E7%89%B9%E5%AE%9Abucket.html","title":"Minio 集群备份全部数据非特定 bucket","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"1. 使用 mc 命令行工具进行全局备份","slug":"_1-使用-mc-命令行工具进行全局备份","link":"#_1-使用-mc-命令行工具进行全局备份","children":[]},{"level":3,"title":"2. 自动化全局备份脚本","slug":"_2-自动化全局备份脚本","link":"#_2-自动化全局备份脚本","children":[]},{"level":3,"title":"3. 跨数据中心的异地复制","slug":"_3-跨数据中心的异地复制","link":"#_3-跨数据中心的异地复制","children":[]},{"level":3,"title":"4. 数据一致性和验证","slug":"_4-数据一致性和验证","link":"#_4-数据一致性和验证","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-集群备份全部数据非特定bucket.md"}')}}]);