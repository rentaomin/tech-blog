"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[7909],{6314:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>i});var p=a(641);const t=[(0,p.Fv)('<h1 id="minio-超大文件优化原理分析" tabindex="-1"><a class="header-anchor" href="#minio-超大文件优化原理分析"><span>Minio 超大文件优化原理分析</span></a></h1><p>MinIO 在处理大文件的高效存储和传输方面，使用了多种优化技术，包括数据分片、流式处理、多节点并行存储 和高效的网络协议。以下是 MinIO 如何处理这些问题的详细说明：</p><h3 id="_1-数据分片和冗余存储" tabindex="-1"><a class="header-anchor" href="#_1-数据分片和冗余存储"><span>1. 数据分片和冗余存储</span></a></h3><p>MinIO 使用 Reed-Solomon erasure coding 将大文件分成多个数据片和冗余片。这种技术不仅提高了存储效率， 还增强了数据的容错能力。</p><ul><li><strong>数据分片</strong>：大文件被分成多个较小的数据片。</li><li><strong>冗余片</strong>：为了保证数据的高可用性，生成额外的冗余片。</li></ul><h3 id="_2-流式处理" tabindex="-1"><a class="header-anchor" href="#_2-流式处理"><span>2. 流式处理</span></a></h3><p>MinIO 支持流式处理，这意味着数据在传输和存储过程中可以边读边写，避免了大文件在内存中的占用。</p><ul><li><strong>流式上传</strong>：文件在上传过程中被分片并同时传输到多个节点。</li><li><strong>流式下载</strong>：在下载过程中，数据片从多个节点并行读取并重建原始文件。</li></ul><h3 id="_3-多节点并行存储" tabindex="-1"><a class="header-anchor" href="#_3-多节点并行存储"><span>3. 多节点并行存储</span></a></h3><p>MinIO 将数据片和冗余片并行存储到多个节点上，这样可以充分利用集群的存储和网络带宽，避免单个节点成为瓶颈。</p><h3 id="_4-高效的网络协议" tabindex="-1"><a class="header-anchor" href="#_4-高效的网络协议"><span>4. 高效的网络协议</span></a></h3><p>MinIO 使用 HTTP/HTTPS 协议进行数据传输，并优化了连接管理和传输效率。例如，使用 HTTP/2 来减少延迟和提高吞吐量。</p><h3 id="代码示例-java-实现-minio-数据分片和分布式存储" tabindex="-1"><a class="header-anchor" href="#代码示例-java-实现-minio-数据分片和分布式存储"><span>代码示例：Java 实现 MinIO 数据分片和分布式存储</span></a></h3><p>以下是一个 Java 示例，展示如何通过 MinIO 的客户端库进行大文件的分片、上传和下载：</p><h4 id="依赖库" tabindex="-1"><a class="header-anchor" href="#依赖库"><span>依赖库</span></a></h4><p>确保你已经引入 MinIO 的 Java 客户端库：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>minio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">MinioClient</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span></span><span class="token class-name">PutObjectOptions</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>minio<span class="token punctuation">.</span>errors<span class="token punctuation">.</span></span><span class="token class-name">MinioException</span></span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">InvalidKeyException</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">NoSuchAlgorithmException</span></span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIODataHandling</span> <span class="token punctuation">{</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token comment">// 创建 MinIO 客户端</span></span>\n<span class="line">            <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinioClient</span><span class="token punctuation">(</span><span class="token string">&quot;https://play.min.io&quot;</span><span class="token punctuation">,</span> </span>\n<span class="line">                <span class="token string">&quot;YOUR-ACCESSKEY&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;YOUR-SECRETKEY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// 检查 Bucket 是否存在，不存在则创建</span></span>\n<span class="line">            <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token string">&quot;my-bucket&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>minioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                minioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// 上传大文件</span></span>\n<span class="line">            <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;path/to/your/largefile&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token string">&quot;largefile&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">long</span> fileSize <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// 设置分片上传选项</span></span>\n<span class="line">            <span class="token class-name">PutObjectOptions</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutObjectOptions</span><span class="token punctuation">(</span>fileSize<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            options<span class="token punctuation">.</span><span class="token function">setPartSize</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个分片大小为 10MB</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// 上传文件</span></span>\n<span class="line">            minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> fileInputStream<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token comment">// 下载大文件</span></span>\n<span class="line">            <span class="token class-name">String</span> downloadPath <span class="token operator">=</span> <span class="token string">&quot;path/to/download/largefile&quot;</span><span class="token punctuation">;</span></span>\n<span class="line">            minioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> downloadPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件下载成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MinioException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchAlgorithmException</span> <span class="token operator">|</span> <span class="token class-name">InvalidKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Error occurred: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明"><span>代码说明</span></a></h3><ol><li><strong>MinIO 客户端初始化</strong>：使用 MinIO 的 Java 客户端库连接到 MinIO 服务器。</li><li><strong>创建 Bucket</strong>：检查指定的 Bucket 是否存在，如果不存在则创建。</li><li><strong>上传大文件</strong>： <ul><li>使用 <code>FileInputStream</code> 打开大文件。</li><li>使用 <code>PutObjectOptions</code> 设置分片上传选项，包括每个分片的大小。</li><li>调用 <code>putObject</code> 方法上传文件，MinIO 客户端会自动处理文件的分片和并行上传。</li></ul></li><li><strong>下载大文件</strong>： <ul><li>调用 <code>getObject</code> 方法下载文件，MinIO 客户端会自动处理文件的分片和并行下载。</li></ul></li></ol><h3 id="关键技术点" tabindex="-1"><a class="header-anchor" href="#关键技术点"><span>关键技术点</span></a></h3><ol><li><strong>分片上传</strong>：MinIO 客户端会自动将大文件分成多个小的分片，并并行上传到 MinIO 服务器。</li><li><strong>流式处理</strong>：文件在上传和下载过程中通过流的方式处理，减少内存占用。</li><li><strong>多节点存储</strong>：在集群模式下，MinIO 会将数据片和冗余片存储到不同的节点上，增强数据的可用性和可靠性。</li></ol><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>MinIO 通过数据分片、流式处理、多节点并行存储和高效的网络协议，实现了大文件的高效存储和传输。上述 Java 示例展示了 如何使用 MinIO 的客户端库进行大文件的分片上传和下载。在实际应用中，这些技术可以帮助你处理大规模数据，确保系统的高 性能和高可用性。</p>',25)],e={},l=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),i=JSON.parse('{"path":"/blog/minio/Minio-%E8%B6%85%E5%A4%A7%E6%96%87%E4%BB%B6%E4%BC%98%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90.html","title":"Minio 超大文件优化原理分析","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"1. 数据分片和冗余存储","slug":"_1-数据分片和冗余存储","link":"#_1-数据分片和冗余存储","children":[]},{"level":3,"title":"2. 流式处理","slug":"_2-流式处理","link":"#_2-流式处理","children":[]},{"level":3,"title":"3. 多节点并行存储","slug":"_3-多节点并行存储","link":"#_3-多节点并行存储","children":[]},{"level":3,"title":"4. 高效的网络协议","slug":"_4-高效的网络协议","link":"#_4-高效的网络协议","children":[]},{"level":3,"title":"代码示例：Java 实现 MinIO 数据分片和分布式存储","slug":"代码示例-java-实现-minio-数据分片和分布式存储","link":"#代码示例-java-实现-minio-数据分片和分布式存储","children":[]},{"level":3,"title":"代码说明","slug":"代码说明","link":"#代码说明","children":[]},{"level":3,"title":"关键技术点","slug":"关键技术点","link":"#关键技术点","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}],"git":{"updatedTime":1720877624000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-超大文件优化原理分析.md"}')}}]);