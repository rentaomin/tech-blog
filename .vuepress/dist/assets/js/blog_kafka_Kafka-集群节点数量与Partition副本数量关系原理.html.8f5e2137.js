"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[7378],{4869:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>o});var p=a(641);const t=[(0,p.Fv)('<h1 id="kafka-集群节点数量与partition-、副本数量关系原理" tabindex="-1"><a class="header-anchor" href="#kafka-集群节点数量与partition-、副本数量关系原理"><span>Kafka 集群节点数量与Partition 、副本数量关系原理</span></a></h1><p>在 Kafka 集群中，分区（partition）数量和副本（replica）数量的配置与集群节点（broker）数量之间存 在一定的关系，这些关系直接影响到 Kafka 集群的负载均衡、高可用性和性能。下面我们来详细分析集群的配置 及其影响。</p><h3 id="分区数量和副本数量的关系" tabindex="-1"><a class="header-anchor" href="#分区数量和副本数量的关系"><span>分区数量和副本数量的关系</span></a></h3><ol><li><strong>分区数量</strong>：决定了 Topic 的并行处理能力。分区数量越多，Kafka 能够并行处理的消息量越大。</li><li><strong>副本数量</strong>：决定了 Kafka 集群的容错能力和数据高可用性。副本数量越多，Kafka 能够承受的节点故 障数越多。</li></ol><h3 id="集群节点数量与分区和副本的关系" tabindex="-1"><a class="header-anchor" href="#集群节点数量与分区和副本的关系"><span>集群节点数量与分区和副本的关系</span></a></h3><h4 id="理想配置关系" tabindex="-1"><a class="header-anchor" href="#理想配置关系"><span>理想配置关系</span></a></h4><ul><li><strong>副本数量</strong>（replication factor）应该小于等于集群中的节点数量。每个分区的每个副本都需要放在不同 的节点上以实现高可用性。</li><li><strong>分区数量</strong>（partitions）应当能够在所有节点上均匀分布，以实现负载均衡。</li></ul><h4 id="具体配置分析" tabindex="-1"><a class="header-anchor" href="#具体配置分析"><span>具体配置分析</span></a></h4><p>假设集群中有 3 个节点（192.168.0.200、192.168.0.201、192.168.0.202），我们创建一个名为 <code>test</code> 的 Topic，配置 2 个分区和 2 个副本。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> <span class="token builtin class-name">test</span> --bootstrap-server <span class="token number">192.168</span>.0.200:9092 <span class="token parameter variable">--partitions</span> <span class="token number">2</span> --replication-factor <span class="token number">2</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="分区和副本的分布示例" tabindex="-1"><a class="header-anchor" href="#分区和副本的分布示例"><span>分区和副本的分布示例</span></a></h3><p>根据上述配置，Kafka 可能会将分区和副本分配如下：</p><ul><li><strong>Partition 0</strong>： <ul><li><strong>Leader</strong>：节点 192.168.0.200</li><li><strong>Follower</strong>：节点 192.168.0.201</li></ul></li><li><strong>Partition 1</strong>： <ul><li><strong>Leader</strong>：节点 192.168.0.201</li><li><strong>Follower</strong>：节点 192.168.0.202</li></ul></li></ul><h3 id="分区和副本分布原则" tabindex="-1"><a class="header-anchor" href="#分区和副本分布原则"><span>分区和副本分布原则</span></a></h3><ol><li><strong>均匀分布</strong>：Kafka 尽量将分区和副本均匀分布在所有节点上，以实现负载均衡。</li><li><strong>副本分布在不同节点上</strong>：同一分区的副本不会分布在同一个节点上，以提高容错能力。</li></ol><h3 id="检查配置是否存在问题" tabindex="-1"><a class="header-anchor" href="#检查配置是否存在问题"><span>检查配置是否存在问题</span></a></h3><ol><li><p><strong>副本数量不得大于集群节点数量</strong>：对于 3 个节点的集群，副本数量不能大于 3，否则 Kafka 无法将副本 分配到不同的节点上。</p><p><strong>问题检查</strong>：你的配置（2 个分区和 2 个副本）是合理的，副本数量小于节点数量，符合 Kafka 的设计原则。</p></li><li><p><strong>分区数量的合理配置</strong>：分区数量决定了并行处理能力，分区数量不需要等于节点数量，但应合理分配以均衡负载。</p><p><strong>建议</strong>：在 3 个节点的集群中，2 个分区是合理的配置。但如果需要更高的并行处理能力，可以增加分区数量。</p></li></ol><h3 id="核心代码示例及详细流程" tabindex="-1"><a class="header-anchor" href="#核心代码示例及详细流程"><span>核心代码示例及详细流程</span></a></h3><h4 id="分区和副本分布算法" tabindex="-1"><a class="header-anchor" href="#分区和副本分布算法"><span>分区和副本分布算法</span></a></h4><p>Kafka 使用特定的算法来分配分区和副本，确保均匀分布和高可用性。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// TopicPartition.scala</span></span>\n<span class="line">object <span class="token class-name">TopicPartition</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">assignReplicasToBrokers</span><span class="token punctuation">(</span>brokerIds<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nPartitions<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> replicationFactor<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        val numBrokers <span class="token operator">=</span> brokerIds<span class="token punctuation">.</span>size</span>\n<span class="line">        val ret <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">mutable<span class="token punctuation">.</span></span>Map</span><span class="token punctuation">.</span>empty<span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span><span class="token operator">-</span> <span class="token number">0</span> until nPartitions<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            val startIndex <span class="token operator">=</span> i <span class="token operator">%</span> numBrokers</span>\n<span class="line">            val replicaAssignment <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> until replicationFactor<span class="token punctuation">)</span><span class="token punctuation">.</span>map <span class="token punctuation">{</span> j <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                <span class="token function">brokerIds</span><span class="token punctuation">(</span><span class="token punctuation">(</span>startIndex <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> numBrokers<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            ret<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> replicaAssignment<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        ret<span class="token punctuation">.</span>toMap</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="副本同步机制" tabindex="-1"><a class="header-anchor" href="#副本同步机制"><span>副本同步机制</span></a></h4><p>Follower 从 Leader 复制数据，保持数据一致性。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// ReplicaFetcherThread.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">ReplicaFetcherThread</span><span class="token punctuation">(</span>replicaId<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> leaderId<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractFetcherThread</span><span class="token punctuation">(</span>replicaId<span class="token punctuation">,</span> leaderId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    override def <span class="token function">fetch</span><span class="token punctuation">(</span>fetchRequest<span class="token operator">:</span> <span class="token class-name">FetchRequest<span class="token punctuation">.</span>Builder</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">FetchDataInfo</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        val fetchResponse <span class="token operator">=</span> leaderBroker<span class="token punctuation">.</span><span class="token function">fetch</span><span class="token punctuation">(</span>fetchRequest<span class="token punctuation">)</span></span>\n<span class="line">        fetchResponse<span class="token punctuation">.</span>data<span class="token punctuation">.</span>asScala<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>tp<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            partition<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>\n<span class="line">            tp <span class="token operator">-&gt;</span> <span class="token class-name">FetchDataInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>baseOffset<span class="token punctuation">,</span> data<span class="token punctuation">.</span>records<span class="token punctuation">.</span>sizeInBytes<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">.</span>toMap</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据分布和同步示意" tabindex="-1"><a class="header-anchor" href="#数据分布和同步示意"><span>数据分布和同步示意</span></a></h3><h4 id="数据分布" tabindex="-1"><a class="header-anchor" href="#数据分布"><span>数据分布</span></a></h4><ul><li><strong>Partition 0</strong>： <ul><li><strong>Leader</strong>：节点 192.168.0.200</li><li><strong>Follower</strong>：节点 192.168.0.201</li></ul></li><li><strong>Partition 1</strong>： <ul><li><strong>Leader</strong>：节点 192.168.0.201</li><li><strong>Follower</strong>：节点 192.168.0.202</li></ul></li></ul><h4 id="数据同步过程" tabindex="-1"><a class="header-anchor" href="#数据同步过程"><span>数据同步过程</span></a></h4><ol><li><strong>生产者发送消息到 Partition Leader</strong>：生产者将消息发送到 <code>test</code> 的某个分区的 Leader。</li><li><strong>Leader 写入日志</strong>：分区 Leader 将消息写入其本地日志。</li><li><strong>Follower 同步数据</strong>：Follower 从 Leader 拉取消息并写入其本地日志。</li><li><strong>ISR 更新</strong>：ISR 列表包含所有与 Leader 保持同步的副本，当消息被所有 ISR 副本写入后，Leader 确认消息提交。</li></ol><h3 id="isr-实现" tabindex="-1"><a class="header-anchor" href="#isr-实现"><span>ISR 实现</span></a></h3><p>ISR 列表管理副本的同步状态。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// Partition.scala</span></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Partition</span><span class="token punctuation">(</span>val topicPartition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> val leader<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> val replicas<span class="token operator">:</span> <span class="token class-name">List</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    val isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token punctuation">[</span><span class="token class-name">List</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>replicas<span class="token punctuation">)</span></span>\n<span class="line">    </span>\n<span class="line">    def <span class="token function">addToIsr</span><span class="token punctuation">(</span>replicaId<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        val currentIsr <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentIsr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>replicaId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            isr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>replicaId <span class="token operator">::</span> <span class="token function">currentIsr</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    def <span class="token function">removeFromIsr</span><span class="token punctuation">(</span>replicaId<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Unit</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        val currentIsr <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentIsr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>replicaId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            isr<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentIsr<span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span>_ <span class="token operator">==</span> replicaId<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    def <span class="token function">isInSync</span><span class="token punctuation">(</span>replicaId<span class="token operator">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Boolean</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>\n<span class="line">        isr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>replicaId<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><strong>配置合理性</strong>：你的配置（3 个节点，2 个分区，2 个副本）是合理的，没有问题。副本数量小于节点数量， 确保了高可用性。</li><li><strong>分区和副本分布</strong>：Kafka 通过算法将分区和副本均匀分布在不同节点上，以实现负载均衡和容错性。</li><li><strong>数据同步和 ISR</strong>：Leader 处理写请求，Follower 异步同步数据。ISR 列表管理副本同步状态，确保数据 一致性和高可用性。</li></ul><p>通过这些设计和机制，Kafka 能够在高并发和高负载的情况下高效运行，同时保证数据的一致性和可靠性。</p>',35)],e={},l=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),o=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E6%95%B0%E9%87%8F%E4%B8%8EPartition%E5%89%AF%E6%9C%AC%E6%95%B0%E9%87%8F%E5%85%B3%E7%B3%BB%E5%8E%9F%E7%90%86.html","title":"Kafka 集群节点数量与Partition 、副本数量关系原理","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"分区数量和副本数量的关系","slug":"分区数量和副本数量的关系","link":"#分区数量和副本数量的关系","children":[]},{"level":3,"title":"集群节点数量与分区和副本的关系","slug":"集群节点数量与分区和副本的关系","link":"#集群节点数量与分区和副本的关系","children":[]},{"level":3,"title":"分区和副本的分布示例","slug":"分区和副本的分布示例","link":"#分区和副本的分布示例","children":[]},{"level":3,"title":"分区和副本分布原则","slug":"分区和副本分布原则","link":"#分区和副本分布原则","children":[]},{"level":3,"title":"检查配置是否存在问题","slug":"检查配置是否存在问题","link":"#检查配置是否存在问题","children":[]},{"level":3,"title":"核心代码示例及详细流程","slug":"核心代码示例及详细流程","link":"#核心代码示例及详细流程","children":[]},{"level":3,"title":"数据分布和同步示意","slug":"数据分布和同步示意","link":"#数据分布和同步示意","children":[]},{"level":3,"title":"ISR 实现","slug":"isr-实现","link":"#isr-实现","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群节点数量与Partition副本数量关系原理.md"}')}}]);