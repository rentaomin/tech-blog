"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[9216],{1064:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>l,data:()=>o});var e=s(641);const p=[(0,e.Fv)('<h1 id="kafka-集群原理设计和实现概述-一" tabindex="-1"><a class="header-anchor" href="#kafka-集群原理设计和实现概述-一"><span>kafka 集群原理设计和实现概述(一)</span></a></h1><p>Kafka 集群的设计原理是为了实现高可用性、高吞吐量、容错性和可扩展性。以下是 Kafka 集群的设计原 理及其实现方法：</p><h3 id="_1-分布式架构设计" tabindex="-1"><a class="header-anchor" href="#_1-分布式架构设计"><span>1. 分布式架构设计</span></a></h3><p>Kafka 采用分布式架构，集群中的多个 Broker 共同工作，负责接收、存储和传递消息。通过将数据分布在 多个 Broker 上，Kafka 实现了负载均衡和高可用性。</p><h3 id="_2-数据分区-partitioning" tabindex="-1"><a class="header-anchor" href="#_2-数据分区-partitioning"><span>2. 数据分区（Partitioning）</span></a></h3><p>Kafka 将每个 Topic 分为多个 Partition，每个 Partition 是一个有序的、不可变的消息队列。分区使 Kafka 可以并行处理消息，提高系统的吞吐量和性能。</p><h4 id="实现方法" tabindex="-1"><a class="header-anchor" href="#实现方法"><span>实现方法：</span></a></h4><ul><li>创建 Topic 时，可以指定 Partition 的数量。</li><li>每个 Partition 由多个副本（Replica）组成，以提高数据的可用性和容错性。</li></ul><h3 id="_3-数据复制-replication" tabindex="-1"><a class="header-anchor" href="#_3-数据复制-replication"><span>3. 数据复制（Replication）</span></a></h3><p>为了提高数据的可用性和容错性，每个 Partition 都有多个副本（Replica）。一个副本被称为 Leader， 其余副本被称为 Follower。所有的读写请求都由 Leader 处理，Follower 复制 Leader 的数据。</p><h4 id="实现方法-1" tabindex="-1"><a class="header-anchor" href="#实现方法-1"><span>实现方法：</span></a></h4><ul><li>在 Topic 创建时指定副本因子（replication factor）。</li><li>Kafka 通过 ZooKeeper 管理副本信息，确保 Leader 和 Follower 的状态一致。</li></ul><h3 id="_4-leader-和-follower-机制" tabindex="-1"><a class="header-anchor" href="#_4-leader-和-follower-机制"><span>4. Leader 和 Follower 机制</span></a></h3><p>每个 Partition 的 Leader 负责处理所有的读写请求，Follower 仅从 Leader 复制数据。当 Leader 发生故障时，Kafka 会自动从 ISR（In-Sync Replica）列表中选举新的 Leader。</p><h4 id="实现方法-2" tabindex="-1"><a class="header-anchor" href="#实现方法-2"><span>实现方法：</span></a></h4><ul><li>ZooKeeper 管理和协调 Leader 选举。</li><li>ISR 列表维护与 Leader 同步的副本，确保在 Leader 选举时有可用的候选者。</li></ul><h3 id="_5-高可用性和故障恢复" tabindex="-1"><a class="header-anchor" href="#_5-高可用性和故障恢复"><span>5. 高可用性和故障恢复</span></a></h3><p>Kafka 通过数据复制和自动故障转移机制实现高可用性。当一个 Broker 或 Partition 发生故障时，Kafka 会自动进行故障转移和恢复，确保系统的连续性。</p><h4 id="实现方法-3" tabindex="-1"><a class="header-anchor" href="#实现方法-3"><span>实现方法：</span></a></h4><ul><li>使用 ZooKeeper 监控 Broker 状态，检测故障。</li><li>自动进行 Leader 选举和副本恢复，确保系统的可用性。</li></ul><h3 id="_6-高吞吐量和低延迟" tabindex="-1"><a class="header-anchor" href="#_6-高吞吐量和低延迟"><span>6. 高吞吐量和低延迟</span></a></h3><p>Kafka 通过高效的 I/O 和批量处理技术，实现了高吞吐量和低延迟。Kafka 使用顺序写入和零拷贝技术，最大限 度地利用磁盘和网络资源。</p><h4 id="实现方法-4" tabindex="-1"><a class="header-anchor" href="#实现方法-4"><span>实现方法：</span></a></h4><ul><li>顺序写入日志文件，减少磁盘寻道时间。</li><li>使用零拷贝技术，减少 CPU 开销。</li><li>批量处理消息，提高传输效率。</li></ul><h3 id="_7-消费者组和消费模式" tabindex="-1"><a class="header-anchor" href="#_7-消费者组和消费模式"><span>7. 消费者组和消费模式</span></a></h3><p>Kafka 支持多种消费模式，包括点对点和发布/订阅模型。通过消费者组（Consumer Group），Kafka 可以实 现消息的负载均衡和容错。</p><h4 id="实现方法-5" tabindex="-1"><a class="header-anchor" href="#实现方法-5"><span>实现方法：</span></a></h4><ul><li>每个消费者组由多个消费者实例组成，每个消费者实例负责消费部分 Partition。</li><li>消费者组内的消费者可以动态加入和退出，Kafka 会自动进行负载均衡。</li></ul><h3 id="_8-配置和管理" tabindex="-1"><a class="header-anchor" href="#_8-配置和管理"><span>8. 配置和管理</span></a></h3><p>Kafka 通过 ZooKeeper 进行配置和管理，维护集群的元数据信息和协调各个组件的工作。ZooKeeper 确保了 Kafka 集群的一致性和高可用性。</p><h4 id="实现方法-6" tabindex="-1"><a class="header-anchor" href="#实现方法-6"><span>实现方法：</span></a></h4><ul><li>ZooKeeper 存储 Broker、Topic、Partition 和 Consumer Group 的元数据。</li><li>Kafka 通过 ZooKeeper 进行 Leader 选举、故障检测和恢复。</li></ul><h3 id="具体实现示例" tabindex="-1"><a class="header-anchor" href="#具体实现示例"><span>具体实现示例</span></a></h3><p>以下是 Kafka 集群设计原理的具体实现示例：</p><h4 id="分区和副本配置" tabindex="-1"><a class="header-anchor" href="#分区和副本配置"><span>分区和副本配置</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建一个名为 &quot;my_topic&quot; 的 Topic，具有 3 个分区和 2 个副本</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> my_topic --bootstrap-server localhost:9092 <span class="token parameter variable">--partitions</span> <span class="token number">3</span> </span>\n<span class="line">--replication-factor <span class="token number">2</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="leader-选举" tabindex="-1"><a class="header-anchor" href="#leader-选举"><span>Leader 选举</span></a></h4><p>ZooKeeper 中存储的 Partition 状态信息：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>\n<span class="line">  <span class="token property">&quot;controller_epoch&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token property">&quot;leader&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token property">&quot;leader_epoch&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token property">&quot;isr&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 Leader 发生故障时，ZooKeeper 会触发新的 Leader 选举，从 ISR 列表中选举新的 Leader。</p><h4 id="消费者组和负载均衡" tabindex="-1"><a class="header-anchor" href="#消费者组和负载均衡"><span>消费者组和负载均衡</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token comment">// 配置消费者组</span></span>\n<span class="line"><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;bootstrap.servers&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;localhost:9092&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;group.id&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;enable.auto.commit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;key.deserializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;value.deserializer&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;my_topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;offset = %d, key = %s, value = %s%n&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>\n<span class="line">        record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Kafka 集群的设计原理包括分布式架构、数据分区、数据复制、Leader 和 Follower 机制、高可用性和故障恢复、 高吞吐量和低延迟、消费者组和消费模式以及配置和管理。这些设计原理通过 ZooKeeper 的协调和管理，确保了 Kafka 集群的高可用性、一致性和可扩展性。理解这些设计原理，对于架构师设计和维护高效、可靠的 Kafka 系统至关重要。</p>',44)],t={},l=(0,s(6262).A)(t,[["render",function(a,n){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),o=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4%E5%8E%9F%E7%90%86%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%AE%9E%E7%8E%B0%E6%A6%82%E8%BF%B0(%E4%B8%80).html","title":"kafka 集群原理设计和实现概述(一)","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. 分布式架构设计","slug":"_1-分布式架构设计","link":"#_1-分布式架构设计","children":[]},{"level":3,"title":"2. 数据分区（Partitioning）","slug":"_2-数据分区-partitioning","link":"#_2-数据分区-partitioning","children":[]},{"level":3,"title":"3. 数据复制（Replication）","slug":"_3-数据复制-replication","link":"#_3-数据复制-replication","children":[]},{"level":3,"title":"4. Leader 和 Follower 机制","slug":"_4-leader-和-follower-机制","link":"#_4-leader-和-follower-机制","children":[]},{"level":3,"title":"5. 高可用性和故障恢复","slug":"_5-高可用性和故障恢复","link":"#_5-高可用性和故障恢复","children":[]},{"level":3,"title":"6. 高吞吐量和低延迟","slug":"_6-高吞吐量和低延迟","link":"#_6-高吞吐量和低延迟","children":[]},{"level":3,"title":"7. 消费者组和消费模式","slug":"_7-消费者组和消费模式","link":"#_7-消费者组和消费模式","children":[]},{"level":3,"title":"8. 配置和管理","slug":"_8-配置和管理","link":"#_8-配置和管理","children":[]},{"level":3,"title":"具体实现示例","slug":"具体实现示例","link":"#具体实现示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720877624000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群原理设计和实现概述(一).md"}')}}]);