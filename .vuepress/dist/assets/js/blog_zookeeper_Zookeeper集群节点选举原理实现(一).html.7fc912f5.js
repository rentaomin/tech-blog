"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[6924],{6437:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>l});var p=a(641);const e=[(0,p.Fv)('<h1 id="zookeeper-集群节点选举原理实现-一" tabindex="-1"><a class="header-anchor" href="#zookeeper-集群节点选举原理实现-一"><span>Zookeeper 集群节点选举原理实现(一)</span></a></h1><p>Zookeeper 是一个分布式协调服务，它在分布式系统中提供了高可用性和强一致性。 Zookeeper 的集群部署通过领导节点（Leader）选举机制来确保集群的高可用性和一致性。 以下是 Zookeeper 领导节点选举的原理介绍和实现逻辑。</p><h3 id="原理介绍" tabindex="-1"><a class="header-anchor" href="#原理介绍"><span>原理介绍</span></a></h3><h4 id="zab-协议" tabindex="-1"><a class="header-anchor" href="#zab-协议"><span>Zab 协议</span></a></h4><p>Zookeeper 使用 Zab（Zookeeper Atomic Broadcast）协议来实现一致性和领导节点选举。Zab 协议分为两个阶段：</p><ol><li><p><strong>选举阶段</strong>：</p><ul><li>当集群启动或现有领导节点失效时，Zookeeper 进入选举阶段。</li><li>在选举阶段，每个节点会选举自己为领导节点，并广播自己的投票信息。</li><li>每个节点会接收其他节点的投票信息，根据投票信息选举出新的领导节点。</li></ul></li><li><p><strong>广播阶段</strong>：</p><ul><li>新的领导节点选举成功后，进入广播阶段。</li><li>在广播阶段，领导节点会接收客户端的写请求，并将请求转发给所有跟随节点（Follower）。</li><li>当多数跟随节点确认请求后，领导节点会将结果返回给客户端，并通知所有跟随节点提交请求。</li></ul></li></ol><h4 id="领导节点选举过程" tabindex="-1"><a class="header-anchor" href="#领导节点选举过程"><span>领导节点选举过程</span></a></h4><p>领导节点选举是 Zab 协议的重要组成部分，其过程如下：</p><ol><li><p><strong>投票阶段</strong>：</p><ul><li>每个节点都会投票给自己，并将投票信息广播给其他节点。投票信息包括节点的 ID 和事务 ID（ZXID）。</li><li>每个节点接收其他节点的投票信息，并比较事务 ID。事务 ID 较大的节点优先成为领导节点。</li><li>如果事务 ID 相同，则比较节点 ID，ID 较大的节点优先成为领导节点。</li></ul></li><li><p><strong>投票收敛</strong>：</p><ul><li>节点持续接收和比较投票信息，直到多数节点达成一致，选出新的领导节点。</li></ul></li><li><p><strong>领导节点确认</strong>：</p><ul><li>新的领导节点会将其身份广播给所有节点，并进入同步阶段。</li><li>在同步阶段，领导节点会将其最新的状态信息同步给所有跟随节点。</li></ul></li><li><p><strong>集群稳定</strong>：</p><ul><li>同步完成后，新的领导节点开始处理客户端请求，集群进入稳定状态。</li></ul></li></ol><h3 id="实现逻辑" tabindex="-1"><a class="header-anchor" href="#实现逻辑"><span>实现逻辑</span></a></h3><p>Zookeeper 领导节点选举的实现逻辑可以通过以下关键类和方法来理解：</p><ol><li><p><strong>QuorumPeer</strong> 类：</p><ul><li><code>QuorumPeer</code> 类是 Zookeeper 集群中的每个节点，它负责启动和管理选举过程。</li><li><code>QuorumPeer</code> 类包含选举逻辑、状态管理和通信机制。</li></ul></li><li><p><strong>FastLeaderElection</strong> 类：</p><ul><li><code>FastLeaderElection</code> 类实现了快速领导节点选举算法。</li><li><code>lookForLeader()</code> 方法是选举过程的核心逻辑，它负责发起和处理选举投票。</li></ul></li><li><p><strong>Vote</strong> 类：</p><ul><li><code>Vote</code> 类表示选举中的投票信息，包括节点 ID 和事务 ID。</li></ul></li></ol><h3 id="选举过程示例" tabindex="-1"><a class="header-anchor" href="#选举过程示例"><span>选举过程示例</span></a></h3><p>以下是一个简化的选举过程示例：</p><ol><li><p><strong>初始化</strong>：</p><ul><li>假设有三个节点 A、B 和 C。每个节点都有一个唯一的 ID 和事务 ID。</li><li>节点启动后，初始化选举过程，投票给自己，并将投票信息广播给其他节点。</li></ul></li><li><p><strong>投票收敛</strong>：</p><ul><li>节点 A 接收来自节点 B 和 C 的投票信息，比较事务 ID 和节点 ID。</li><li>节点 B 接收来自节点 A 和 C 的投票信息，比较事务 ID 和节点 ID。</li><li>节点 C 接收来自节点 A 和 B 的投票信息，比较事务 ID 和节点 ID。</li></ul></li><li><p><strong>选举结果</strong>：</p><ul><li>多数节点达成一致，选举出节点 A 为领导节点。</li><li>节点 A 将其身份广播给所有节点，进入同步阶段。</li></ul></li><li><p><strong>同步和稳定</strong>：</p><ul><li>节点 A 将最新的状态信息同步给节点 B 和 C。</li><li>同步完成后，节点 A 开始处理客户端请求，集群进入稳定状态。</li></ul></li></ol><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><p>以下是一个简化的代码示例，展示了 Zookeeper 领导节点选举的基本逻辑：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">Vote</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">int</span> nodeId<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">long</span> zxid<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token class-name">Vote</span><span class="token punctuation">(</span><span class="token keyword">int</span> nodeId<span class="token punctuation">,</span> <span class="token keyword">long</span> zxid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>nodeId <span class="token operator">=</span> nodeId<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>zxid <span class="token operator">=</span> zxid<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">class</span> <span class="token class-name">QuorumPeer</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">int</span> myId<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">long</span> myZxid<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Vote</span><span class="token punctuation">&gt;</span></span> votes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token class-name">QuorumPeer</span><span class="token punctuation">(</span><span class="token keyword">int</span> myId<span class="token punctuation">,</span> <span class="token keyword">long</span> myZxid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>myId <span class="token operator">=</span> myId<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>myZxid <span class="token operator">=</span> myZxid<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token class-name">Vote</span> <span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        votes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>myId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>myId<span class="token punctuation">,</span> myZxid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token class-name">Vote</span> bestVote <span class="token operator">=</span> <span class="token function">getBestVote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMajority</span><span class="token punctuation">(</span>bestVote<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> bestVote<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token class-name">Vote</span> <span class="token function">getBestVote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token class-name">Vote</span> bestVote <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Vote</span> vote <span class="token operator">:</span> votes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>bestVote <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> vote<span class="token punctuation">.</span>zxid <span class="token operator">&gt;</span> bestVote<span class="token punctuation">.</span>zxid <span class="token operator">||</span> <span class="token punctuation">(</span>vote<span class="token punctuation">.</span>zxid <span class="token operator">==</span> bestVote<span class="token punctuation">.</span>zxid </span>\n<span class="line">                <span class="token operator">&amp;&amp;</span> vote<span class="token punctuation">.</span>nodeId <span class="token operator">&gt;</span> bestVote<span class="token punctuation">.</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                bestVote <span class="token operator">=</span> vote<span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">return</span> bestVote<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">boolean</span> <span class="token function">isMajority</span><span class="token punctuation">(</span><span class="token class-name">Vote</span> vote<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Vote</span> v <span class="token operator">:</span> votes<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>zxid <span class="token operator">==</span> vote<span class="token punctuation">.</span>zxid <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>nodeId <span class="token operator">==</span> vote<span class="token punctuation">.</span>nodeId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                count<span class="token operator">++</span><span class="token punctuation">;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">return</span> count <span class="token operator">&gt;</span> <span class="token punctuation">(</span>votes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token keyword">void</span> <span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token keyword">int</span> nodeId<span class="token punctuation">,</span> <span class="token keyword">long</span> zxid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        votes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>nodeId<span class="token punctuation">,</span> zxid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZookeeperLeaderElection</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token class-name">QuorumPeer</span> nodeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">QuorumPeer</span> nodeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">QuorumPeer</span> nodeC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        nodeA<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        nodeA<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        nodeB<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        nodeB<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        nodeC<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        nodeC<span class="token punctuation">.</span><span class="token function">receiveVote</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token class-name">Vote</span> leaderA <span class="token operator">=</span> nodeA<span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">Vote</span> leaderB <span class="token operator">=</span> nodeB<span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">Vote</span> leaderC <span class="token operator">=</span> nodeC<span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Node A elected leader: &quot;</span> <span class="token operator">+</span> leaderA<span class="token punctuation">.</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Node B elected leader: &quot;</span> <span class="token operator">+</span> leaderB<span class="token punctuation">.</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Node C elected leader: &quot;</span> <span class="token operator">+</span> leaderC<span class="token punctuation">.</span>nodeId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，我们创建了三个 <code>QuorumPeer</code> 节点，并模拟了选举过程。每个节点投票给自己并接收其 他节点的投票。最后，每个节点根据投票信息选举出领导节点。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>Zookeeper 通过 Zab 协议实现领导节点选举，以确保集群的一致性和高可用性。领导节点选举过程包括 投票、投票收敛、领导节点确认和集群稳定。</p>',21)],t={},o=(0,a(6262).A)(t,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,e)}]]),l=JSON.parse('{"path":"/blog/zookeeper/Zookeeper%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E9%80%89%E4%B8%BE%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0(%E4%B8%80).html","title":"Zookeeper 集群节点选举原理实现(一)","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Zookeeper"],"tag":["分布式管理"],"sticky":true,"excerpt":"<p> Zookeeper 客户端命令操作 </p>"},"headers":[{"level":3,"title":"原理介绍","slug":"原理介绍","link":"#原理介绍","children":[]},{"level":3,"title":"实现逻辑","slug":"实现逻辑","link":"#实现逻辑","children":[]},{"level":3,"title":"选举过程示例","slug":"选举过程示例","link":"#选举过程示例","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/zookeeper/Zookeeper集群节点选举原理实现(一).md"}')}}]);