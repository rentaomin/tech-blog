"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[4220],{613:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>l});var p=a(641);const t=[(0,p.Fv)('<h1 id="minio-集群启动过程执行了哪些逻辑" tabindex="-1"><a class="header-anchor" href="#minio-集群启动过程执行了哪些逻辑"><span>Minio 集群启动过程执行了哪些逻辑？</span></a></h1><p>MinIO 集群启动时会执行一系列核心逻辑，以确保系统的高可用性和一致性。这些核心逻辑包括节点初始化、配置加载、 网络绑定、数据分片与冗余配置、心跳机制、故障检测与恢复等。以下是 MinIO 集群启动时的核心执行逻辑详细说明：</p><h3 id="核心执行逻辑" tabindex="-1"><a class="header-anchor" href="#核心执行逻辑"><span>核心执行逻辑</span></a></h3><h4 id="_1-节点初始化" tabindex="-1"><a class="header-anchor" href="#_1-节点初始化"><span>1. 节点初始化</span></a></h4><p>当 MinIO 启动时，每个节点会进行初始化操作。这包括设置节点的基本属性和环境变量，例如节点的 ID、IP 地址、端口、数据目录等。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">initNode</span><span class="token punctuation">(</span>id <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> dataDir <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Node <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">{</span></span>\n<span class="line">        ID<span class="token punctuation">:</span>       id<span class="token punctuation">,</span></span>\n<span class="line">        Address<span class="token punctuation">:</span>  address<span class="token punctuation">,</span></span>\n<span class="line">        DataDir<span class="token punctuation">:</span>  dataDir<span class="token punctuation">,</span></span>\n<span class="line">        LastSeen<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置加载" tabindex="-1"><a class="header-anchor" href="#_2-配置加载"><span>2. 配置加载</span></a></h4><p>节点会加载配置文件，这些配置文件包含了集群的信息、节点列表、网络设置、安全策略等。配置文件通常位于节点的配置目录中。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">loadConfig</span><span class="token punctuation">(</span>configPath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Config<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>configPath<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span>\n<span class="line">    config <span class="token operator">:=</span> <span class="token operator">&amp;</span>Config<span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line">    decoder <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></span>\n<span class="line">    err <span class="token operator">=</span> decoder<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> config<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-网络绑定" tabindex="-1"><a class="header-anchor" href="#_3-网络绑定"><span>3. 网络绑定</span></a></h4><p>每个节点会绑定到指定的 IP 地址和端口上，以便接收客户端请求和其他节点的通信请求。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">bindNetwork</span><span class="token punctuation">(</span>address <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>\n<span class="line">    listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">&quot;tcp&quot;</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">go</span> http<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-数据分片与冗余配置" tabindex="-1"><a class="header-anchor" href="#_4-数据分片与冗余配置"><span>4. 数据分片与冗余配置</span></a></h4><p>在启动过程中，节点会根据配置的冗余策略（例如 Reed-Solomon erasure coding）准备数据分片和冗余片。此过程确保集群 可以提供高可用性和容错能力。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">configureErasureCoding</span><span class="token punctuation">(</span>dataShards <span class="token builtin">int</span><span class="token punctuation">,</span> parityShards <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>reedsolomon<span class="token punctuation">.</span>Encoder<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    enc<span class="token punctuation">,</span> err <span class="token operator">:=</span> reedsolomon<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>dataShards<span class="token punctuation">,</span> parityShards<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> enc<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-心跳机制" tabindex="-1"><a class="header-anchor" href="#_5-心跳机制"><span>5. 心跳机制</span></a></h4><p>启动后，每个节点会启动心跳机制，定期向其他节点发送心跳信号，并接收来自其他节点的心跳信号。这用于检测节点的存活状态。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">startHeartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Peers <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>peer <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;http://%s/heartbeat?from=%s&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">,</span> n<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>\n<span class="line">                    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Error sending heartbeat to %s: %v\\n&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">                time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">(</span>peer<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">heartbeatHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    from <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;from&quot;</span><span class="token punctuation">)</span></span>\n<span class="line">    n<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    n<span class="token punctuation">.</span>LastSeen<span class="token punctuation">[</span>from<span class="token punctuation">]</span> <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    n<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">&quot;Received heartbeat from %s&quot;</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-故障检测与恢复" tabindex="-1"><a class="header-anchor" href="#_6-故障检测与恢复"><span>6. 故障检测与恢复</span></a></h4><p>节点会定期检查其他节点的存活状态。如果检测到某个节点长时间未发送心跳信号，会认为该节点故障。集群会根据配置进行 故障恢复，例如重新分配数据分片，确保数据的高可用性。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token function">checkPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>\n<span class="line">        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>\n<span class="line">        n<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">for</span> peer<span class="token punctuation">,</span> lastSeen <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>LastSeen <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>lastSeen<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second <span class="token punctuation">{</span></span>\n<span class="line">                fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Node %s is considered dead\\n&quot;</span><span class="token punctuation">,</span> peer<span class="token punctuation">)</span></span>\n<span class="line">                <span class="token comment">// 执行故障恢复逻辑</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        n<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7-客户端请求处理" tabindex="-1"><a class="header-anchor" href="#_7-客户端请求处理"><span>7. 客户端请求处理</span></a></h4><p>每个节点启动后，可以接收并处理客户端的请求。请求处理逻辑包括读取、写入数据、数据分片、数据同步等。</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre class="language-go"><code><span class="line"><span class="token keyword">func</span> <span class="token function">handleClientRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">,</span> handleUpload<span class="token punctuation">)</span></span>\n<span class="line">    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">&quot;/download&quot;</span><span class="token punctuation">,</span> handleDownload<span class="token punctuation">)</span></span>\n<span class="line">    http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">&quot;:9000&quot;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">handleUpload</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 上传处理逻辑</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">func</span> <span class="token function">handleDownload</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token comment">// 下载处理逻辑</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整启动流程" tabindex="-1"><a class="header-anchor" href="#完整启动流程"><span>完整启动流程</span></a></h3><ol><li><strong>节点初始化</strong>：初始化节点的基本属性和环境变量。</li><li><strong>配置加载</strong>：加载集群的配置信息。</li><li><strong>网络绑定</strong>：绑定到指定的 IP 地址和端口，准备接收请求。</li><li><strong>数据分片与冗余配置</strong>：配置数据分片和冗余策略。</li><li><strong>心跳机制</strong>：启动心跳机制，检测节点的存活状态。</li><li><strong>故障检测与恢复</strong>：定期检查节点状态，进行故障检测和恢复。</li><li><strong>客户端请求处理</strong>：启动服务，接收并处理客户端的请求。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>MinIO 集群启动时会执行一系列核心逻辑，包括节点初始化、配置加载、网络绑定、数据分片与冗余配置、心跳机制、 故障检测与恢复，以及客户端请求处理。这些逻辑确保了 MinIO 集群的高可用性、一致性和容错能力，使其能够在 分布式环境中高效运行。通过理解这些核心逻辑，可以更好地部署和管理 MinIO 集群。</p>',28)],e={},o=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,t)}]]),l=JSON.parse('{"path":"/blog/minio/Minio-%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E6%89%A7%E8%A1%8C%E4%BA%86%E5%93%AA%E4%BA%9B%E9%80%BB%E8%BE%91.html","title":"Minio 集群启动过程执行了哪些逻辑？","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Minio"],"tag":["对象存储"],"sticky":true,"excerpt":"<p> Minio 上传请求负载分析 </p>"},"headers":[{"level":3,"title":"核心执行逻辑","slug":"核心执行逻辑","link":"#核心执行逻辑","children":[]},{"level":3,"title":"完整启动流程","slug":"完整启动流程","link":"#完整启动流程","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720536662000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/minio/Minio-集群启动过程执行了哪些逻辑.md"}')}}]);