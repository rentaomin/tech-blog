"use strict";(self.webpackChunkarch_guide=self.webpackChunkarch_guide||[]).push([[8979],{6224:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>l});var t=s(641);const e=[(0,t.Fv)('<h1 id="kafka-集群-topic-之-partion-消息可靠性设计-二" tabindex="-1"><a class="header-anchor" href="#kafka-集群-topic-之-partion-消息可靠性设计-二"><span>kafka 集群 Topic 之 Partion 消息可靠性设计（二）</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">kafka topic 的多个partition 存储的数据区别与关系，kafka集群，是在单个节点通过多个副本来保证</span>\n<span class="line">同一消息高可用，还是跨节点保证同一个消息的高可用?</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Kafka 中，Topic 是逻辑上的数据类别，而 Partition 是物理上的分区，每个 Partition 是一个有序的、 不可变的消息队列。以下是关于 Kafka Topic 的多个 Partition 之间的数据区别与关系，以及 Kafka 集群中 如何保证消息的高可用性的详细解析。</p><h3 id="_1-kafka-topic-和-partition-的关系" tabindex="-1"><a class="header-anchor" href="#_1-kafka-topic-和-partition-的关系"><span>1. Kafka Topic 和 Partition 的关系</span></a></h3><h4 id="数据区别" tabindex="-1"><a class="header-anchor" href="#数据区别"><span>数据区别：</span></a></h4><ul><li><p><strong>Partition 内部数据有序</strong>：每个 Partition 内部的数据是有序的，消息按照追加的顺序存储。</p></li><li><p><strong>Partition 之间数据无序</strong>：不同 Partition 之间的数据没有顺序关系。即使同一个 Topic 的消息在不 同 Partition 中，消息的顺序也无法保证。</p></li><li><p><strong>独立存储</strong>：每个 Partition 独立存储消息，有自己的日志文件和索引文件。</p></li></ul><h4 id="数据关系" tabindex="-1"><a class="header-anchor" href="#数据关系"><span>数据关系：</span></a></h4><ul><li><p><strong>逻辑上的一个整体</strong>：虽然每个 Partition 独立存储数据，但它们共同组成一个 Topic。Topic 中的所有 Partition 共同存储该 Topic 的所有消息。</p></li><li><p><strong>并行处理</strong>：多个 Partition 允许并行处理，从而提高吞吐量。生产者和消费者可以并行地向不同的 Partition 写入和读取数据。</p></li></ul><h3 id="_2-kafka-集群的高可用性设计" tabindex="-1"><a class="header-anchor" href="#_2-kafka-集群的高可用性设计"><span>2. Kafka 集群的高可用性设计</span></a></h3><p>Kafka 通过副本机制和跨节点分布来实现消息的高可用性。</p><h4 id="副本机制" tabindex="-1"><a class="header-anchor" href="#副本机制"><span>副本机制：</span></a></h4><ul><li><p><strong>Leader 和 Follower</strong>：每个 Partition 有一个 Leader 和多个 Follower。Leader 负责处理所有的读写 请求，Follower 从 Leader 复制数据。</p></li><li><p><strong>ISR 列表</strong>：In-Sync Replica（ISR）列表包含所有与 Leader 保持同步的副本。如果一个 Follower 不能及 时同步数据，它将被从 ISR 列表中移除。</p></li></ul><h4 id="跨节点分布" tabindex="-1"><a class="header-anchor" href="#跨节点分布"><span>跨节点分布：</span></a></h4><ul><li><strong>跨节点副本</strong>：Kafka 的副本机制确保同一 Partition 的副本分布在不同的节点上，以实现高可用性和容错性。</li><li><strong>故障切换</strong>：如果 Leader 节点故障，Kafka 会从 ISR 列表中选举一个新的 Leader，从而实现故障切换和高可用性。</li></ul><h3 id="_3-原理解析" tabindex="-1"><a class="header-anchor" href="#_3-原理解析"><span>3. 原理解析</span></a></h3><h4 id="partition-内部结构" tabindex="-1"><a class="header-anchor" href="#partition-内部结构"><span>Partition 内部结构</span></a></h4><p>每个 Partition 是一个有序的消息队列，包含以下主要部分：</p><ul><li><strong>日志文件</strong>：存储实际的消息数据。</li><li><strong>索引文件</strong>：记录消息在日志文件中的偏移量，便于快速查找。</li></ul><h4 id="副本分布和高可用性" tabindex="-1"><a class="header-anchor" href="#副本分布和高可用性"><span>副本分布和高可用性</span></a></h4><ol><li><p><strong>副本分布</strong>：</p><p>Kafka 在创建 Topic 时，会根据配置的副本因子（replication factor）在不同的节点上创建副本。每个 Partition 的副本分布在不同的 Broker 上。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># 创建一个名为 &quot;my_topic&quot; 的 Topic，具有 3 个分区和 3 个副本</span></span>\n<span class="line">bin/kafka-topics.sh <span class="token parameter variable">--create</span> <span class="token parameter variable">--topic</span> my_topic --bootstrap-server localhost:9092 <span class="token parameter variable">--partitions</span> <span class="token number">3</span> </span>\n<span class="line">--replication-factor <span class="token number">3</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Leader 选举</strong>：</p><p>Kafka 使用 ZooKeeper 进行 Leader 选举。Leader 负责处理读写请求，Follower 从 Leader 复制数据。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PartitionStateMachine</span><span class="token punctuation">(</span>controller<span class="token operator">:</span> <span class="token class-name">KafkaController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">handleStateChanges</span><span class="token punctuation">(</span>partitions<span class="token operator">:</span> <span class="token class-name">Set</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetState<span class="token operator">:</span> <span class="token class-name">PartitionState</span><span class="token punctuation">,</span> </span>\n<span class="line">    assignments<span class="token operator">:</span> <span class="token class-name">Map</span><span class="token punctuation">[</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val currentState <span class="token operator">=</span> controllerContext<span class="token punctuation">.</span><span class="token function">partitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            targetState match <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OnlinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为在线状态</span></span>\n<span class="line">                    <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token function">assignments</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">                <span class="token keyword">case</span> <span class="token class-name">OfflinePartition</span> <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">                    <span class="token comment">// 将分区设置为离线状态</span></span>\n<span class="line">                    <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeLeader</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> assignedReplicas<span class="token operator">:</span> <span class="token class-name">Seq</span><span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 选举 Leader 并更新 ISR 列表</span></span>\n<span class="line">        val leader <span class="token operator">=</span> assignedReplicas<span class="token punctuation">.</span>head</span>\n<span class="line">        val isr <span class="token operator">=</span> assignedReplicas</span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">putPartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">updateLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">,</span> <span class="token class-name">LeaderAndIsr</span><span class="token punctuation">(</span>leader<span class="token punctuation">,</span> isr<span class="token punctuation">)</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    </span>\n<span class="line">    <span class="token keyword">private</span> def <span class="token function">makeFollower</span><span class="token punctuation">(</span>partition<span class="token operator">:</span> <span class="token class-name">TopicPartition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token comment">// 将分区设置为 Follower 状态</span></span>\n<span class="line">        controllerContext<span class="token punctuation">.</span><span class="token function">removePartitionLeadershipInfo</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">        zkClient<span class="token punctuation">.</span><span class="token function">deleteLeaderAndIsr</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>高可用性和故障恢复</strong>：</p><ul><li>当一个 Broker 故障时，Kafka Controller 会从 ISR 列表中选举新的 Leader，并更新 ZooKeeper 中的元数据。</li><li>新的 Leader 接管读写请求，确保服务不中断。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre class="language-java"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">KafkaController</span><span class="token punctuation">(</span>zooKeeperClient<span class="token operator">:</span> <span class="token class-name">KafkaZkClient</span><span class="token punctuation">,</span> config<span class="token operator">:</span> <span class="token class-name">KafkaConfig</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    def <span class="token function">onPartitionModifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        val partitions <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getAllPartitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        partitions<span class="token punctuation">.</span>foreach <span class="token punctuation">{</span> partition <span class="token operator">=</span><span class="token operator">&gt;</span></span>\n<span class="line">            val leaderIsrAndControllerEpoch <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getLeaderAndIsrForPartition</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>leaderIsrAndControllerEpoch<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token comment">// 如果没有 Leader，选举新的 Leader</span></span>\n<span class="line">                partitionStateMachine<span class="token punctuation">.</span><span class="token function">handleStateChanges</span><span class="token punctuation">(</span></span>\n<span class="line">                    <span class="token class-name">Set</span><span class="token punctuation">(</span>partition<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OnlinePartition</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span>empty</span>\n<span class="line">                <span class="token punctuation">)</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="数据同步和消息保证" tabindex="-1"><a class="header-anchor" href="#数据同步和消息保证"><span>数据同步和消息保证</span></a></h4><ul><li><strong>数据同步</strong>：Follower 副本从 Leader 复制数据，确保所有副本的数据一致性。</li><li><strong>消息有序</strong>：在同一个 Partition 内，消息按照追加的顺序存储和消费，保证分区内消息的有序性。</li><li><strong>消息不丢失</strong>：通过副本机制和持久化存储，确保消息即使在 Broker 故障时也不会丢失。</li><li><strong>重复消费</strong>：消费者可以控制偏移量，实现消息的重复消费。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li><p><strong>Partition 是 Kafka 提高并行处理能力和吞吐量的关键设计</strong>。每个 Partition 是一个独立的消息队列， 分区内的数据是有序的，但不同分区之间的数据无序。</p></li><li><p><strong>Kafka 通过副本机制和跨节点分布来保证消息的高可用性</strong>。同一 Partition 的副本分布在不同的节点上， 确保即使一个节点故障，消息也不会丢失。</p></li><li><p><strong>ZooKeeper 在 Kafka 集群管理中起到关键作用</strong>，包括 Leader 选举、分区状态管理和故障切换。</p></li></ul><p>通过这些设计，Kafka 实现了高性能、高可用性和可靠性的分布式消息系统。</p>',25)],p={},i=(0,s(6262).A)(p,[["render",function(n,a){return(0,t.uX)(),(0,t.CE)("div",null,e)}]]),l=JSON.parse('{"path":"/blog/kafka/Kafka-%E9%9B%86%E7%BE%A4Topic%E4%B9%8BPartion%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E6%80%A7%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89.html","title":"kafka 集群 Topic 之 Partion 消息可靠性设计（二）","lang":"zh-CN","frontmatter":{"date":"2021-07-07T00:00:00.000Z","category":["Kafka"],"tag":["消息队列"],"sticky":true,"excerpt":"<p>Kafka 集群原理设计分析</p>"},"headers":[{"level":3,"title":"1. Kafka Topic 和 Partition 的关系","slug":"_1-kafka-topic-和-partition-的关系","link":"#_1-kafka-topic-和-partition-的关系","children":[]},{"level":3,"title":"2. Kafka 集群的高可用性设计","slug":"_2-kafka-集群的高可用性设计","link":"#_2-kafka-集群的高可用性设计","children":[]},{"level":3,"title":"3. 原理解析","slug":"_3-原理解析","link":"#_3-原理解析","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1720877624000,"contributors":[{"name":"asus","email":"939943844@qq.com","commits":1}]},"filePathRelative":"blog/kafka/Kafka-集群Topic之Partion消息可靠性设计（二）.md"}')}}]);